{"version":3,"sources":["webpack://@lokidb/loki/webpack/universalModuleDefinition","webpack://@lokidb/loki/webpack/bootstrap","webpack://@lokidb/loki/./packages/common/plugin.ts","webpack://@lokidb/loki/./packages/loki/src/unique_index.ts","webpack://@lokidb/loki/./packages/loki/src/clone.ts","webpack://@lokidb/loki/./packages/loki/src/helper.ts","webpack://@lokidb/loki/./packages/loki/src/result_set.ts","webpack://@lokidb/loki/./packages/loki/src/dynamic_view.ts","webpack://@lokidb/loki/./packages/loki/src/collection.ts","webpack://@lokidb/loki/./packages/loki/src/event_emitter.ts","webpack://@lokidb/loki/./packages/loki/src/loki.ts","webpack://@lokidb/loki/(webpack)/buildin/global.js","webpack://@lokidb/loki/./packages/loki/src/index.ts"],"names":[],"mappings":"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","file":"lokidb.loki.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@lokidb/loki\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@lokidb/loki\"] = factory();\n\telse\n\t\troot[\"@lokidb/loki\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","function getGlobal(): any {\n  let glob;\n  (function (global) {\n    glob = global;\n  })(global !== undefined && global || this);\n  return glob;\n}\n\n\nfunction create(): void {\n  const global = getGlobal();\n  const sym = Symbol.for(\"LOKI\") as any;\n  if (global[sym] === undefined) {\n    global[sym] = {\n    };\n  }\n  return global[sym];\n}\n\n/**\n * @hidden\n */\nexport const PLUGINS = create();\n","import {Dict, Doc} from \"../../common/types\";\n\nexport class UniqueIndex<T extends object = object> {\n  // The property field to index.\n  private _field: keyof T;\n  // The map with the indices rows of unique property fields.\n  private _keyMap: Dict<number>;\n\n  /**\n   * Constructs an unique index object.\n   * @param {number|string} propertyField - the property field to index\n   */\n  constructor(propertyField: keyof T) {\n    this._field = propertyField;\n    this._keyMap = {};\n  }\n\n  /**\n   * Sets a document's unique index.\n   * @param {Doc} doc - the document\n   * @param {number} row - the data row of the document\n   */\n  public set(doc: Doc<T>, row: number): void {\n    const fieldValue = doc[this._field] as any as number;\n    if (fieldValue !== null && fieldValue !== undefined) {\n      if (this._keyMap[fieldValue] !== undefined) {\n        throw new Error(\"Duplicate key for property \" + this._field + \": \" + fieldValue);\n      } else {\n        this._keyMap[fieldValue] = row;\n      }\n    }\n  }\n\n  /**\n   * Returns the data row of an unique index.\n   * @param {number|string} index - the index\n   * @returns {number | string} - the row\n   */\n  public get(index: keyof T): number {\n    return this._keyMap[index];\n  }\n\n  /**\n   * Updates a document's unique index.\n   * @param  {Object} doc - the document\n   * @param  {number} row - the data row of the document\n   */\n  public update(doc: Doc<T>, row: number): void {\n    // Find and remove current keyMap for row.\n    const uniqueNames = Object.keys(this._keyMap);\n    for (let i = 0; i < uniqueNames.length; i++) {\n      if (row === this._keyMap[uniqueNames[i]]) {\n        delete this._keyMap[uniqueNames[i]];\n        break;\n      }\n    }\n    this.set(doc, row);\n  }\n\n  /**\n   * Removes an unique index.\n   * @param {number|string} index - the unique index\n   */\n  public remove(index: number | string): void {\n    if (this._keyMap[index] !== undefined) {\n      delete this._keyMap[index];\n    } else {\n      throw new Error(\"Key is not in unique index: \" + this._field);\n    }\n  }\n\n  /**\n   * Clears all unique indexes.\n   */\n  public clear(): void {\n    this._keyMap = {};\n  }\n}\n","export type CloneMethod = \"parse-stringify\" | \"deep\" | \"shallow\" | \"shallow-recurse\";\n\nfunction add(copy: any, key: any, value: any): any {\n  if (copy instanceof Array) {\n    copy.push(value);\n    return copy[copy.length - 1];\n  } else if (copy instanceof Object) {\n    copy[key] = value;\n    return copy[key];\n  }\n}\n\nfunction walk(target: any, copy: any): void {\n  for (let key in target) {\n    let obj = target[key];\n    if (obj instanceof Date) {\n      let value = new Date(obj.getTime());\n      add(copy, key, value);\n    } else if (obj instanceof Function) {\n      let value = obj;\n      add(copy, key, value);\n    } else if (obj instanceof Array) {\n      let value: any[] = [];\n      let last = add(copy, key, value);\n      walk(obj, last);\n    } else if (obj instanceof Object) {\n      let value = {};\n      let last = add(copy, key, value);\n      walk(obj, last);\n    } else {\n      let value = obj;\n      add(copy, key, value);\n    }\n  }\n}\n\n// Deep copy from Simeon Velichkov.\n/**\n * @param target\n * @returns {any}\n */\nfunction deepCopy(target: any) {\n  if (/number|string|boolean/.test(typeof target)) {\n    return target;\n  } else if (target instanceof Date) {\n    return new Date(target.getTime());\n  }\n\n  const copy = (target instanceof Array) ? [] : {};\n  walk(target, copy);\n  return copy;\n}\n\n/**\n * @hidden\n */\nexport function clone<T>(data: T, method: CloneMethod = \"parse-stringify\"): T {\n  if (data === null || data === undefined) {\n    return null;\n  }\n\n  let cloned: any;\n\n  switch (method) {\n    case \"parse-stringify\":\n      cloned = JSON.parse(JSON.stringify(data));\n      break;\n    case \"deep\":\n      cloned = deepCopy(data);\n      break;\n    case \"shallow\":\n      cloned = Object.create(data.constructor.prototype);\n      Object.assign(cloned, data);\n      break;\n    case \"shallow-recurse\":\n      // shallow clone top level properties\n      cloned = clone(data, \"shallow\");\n      const keys = Object.keys(data);\n      // for each of the top level properties which are object literals, recursively shallow copy\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if (typeof data[key] === \"object\" && data[key].constructor.name === \"Object\") {\n          cloned[key] = clone(data[key], \"shallow-recurse\");\n        }\n      }\n      break;\n    default:\n      break;\n  }\n\n  return cloned as any as T;\n}\n","/**\n * Helper function for determining 'loki' abstract equality which is a little more abstract than ==\n *     aeqHelper(5, '5') === true\n *     aeqHelper(5.0, '5') === true\n *     aeqHelper(new Date(\"1/1/2011\"), new Date(\"1/1/2011\")) === true\n *     aeqHelper({a:1}, {z:4}) === true (all objects sorted equally)\n *     aeqHelper([1, 2, 3], [1, 3]) === false\n *     aeqHelper([1, 2, 3], [1, 2, 3]) === true\n *     aeqHelper(undefined, null) === true\n * @param {any} prop1\n * @param {any} prop2\n * @returns {boolean}\n * @hidden\n */\nexport function aeqHelper(prop1: any, prop2: any): boolean {\n  if (prop1 === prop2) return true;\n\n  // 'falsy' and Boolean handling\n  if (!prop1 || !prop2 || prop1 === true || prop2 === true || prop1 !== prop1 || prop2 !== prop2) {\n    let t1: number;\n    let t2: number;\n\n    // dates and NaN conditions (typed dates before serialization)\n    switch (prop1) {\n      case undefined:\n        t1 = 1;\n        break;\n      case null:\n        t1 = 1;\n        break;\n      case false:\n        t1 = 3;\n        break;\n      case true:\n        t1 = 4;\n        break;\n      case \"\":\n        t1 = 5;\n        break;\n      default:\n        t1 = (prop1 === prop1) ? 9 : 0;\n        break;\n    }\n\n    switch (prop2) {\n      case undefined:\n        t2 = 1;\n        break;\n      case null:\n        t2 = 1;\n        break;\n      case false:\n        t2 = 3;\n        break;\n      case true:\n        t2 = 4;\n        break;\n      case \"\":\n        t2 = 5;\n        break;\n      default:\n        t2 = (prop2 === prop2) ? 9 : 0;\n        break;\n    }\n\n    // one or both is edge case\n    if (t1 !== 9 || t2 !== 9) {\n      return (t1 === t2);\n    }\n  }\n\n  // Handle 'Number-like' comparisons\n  let cv1 = Number(prop1);\n  let cv2 = Number(prop2);\n\n  // if one or both are 'number-like'...\n  if (cv1 === cv1 || cv2 === cv2) {\n    return (cv1 === cv2);\n  }\n\n  // not strict equal nor less than nor gt so must be mixed types, convert to string and use that to compare\n  cv1 = prop1.toString();\n  cv2 = prop2.toString();\n\n  return (cv1 == cv2);\n}\n\n/**\n * Helper function for determining 'less-than' conditions for ops, sorting, and binary indices.\n *     In the future we might want $lt and $gt ops to use their own functionality/helper.\n *     Since binary indices on a property might need to index [12, NaN, new Date(), Infinity], we\n *     need this function (as well as gtHelper) to always ensure one value is LT, GT, or EQ to another.\n * @hidden\n */\nexport function ltHelper(prop1: any, prop2: any, equal: boolean): boolean {\n  // if one of the params is falsy or strictly true or not equal to itself\n  // 0, 0.0, \"\", NaN, null, undefined, not defined, false, true\n  if (!prop1 || !prop2 || prop1 === true || prop2 === true || prop1 !== prop1 || prop2 !== prop2) {\n    let t1: number;\n    let t2: number;\n\n    switch (prop1) {\n      case undefined:\n        t1 = 1;\n        break;\n      case null:\n        t1 = 1;\n        break;\n      case false:\n        t1 = 3;\n        break;\n      case true:\n        t1 = 4;\n        break;\n      case \"\":\n        t1 = 5;\n        break;\n      // if strict equal probably 0 so sort higher, otherwise probably NaN so sort lower than even null\n      default:\n        t1 = (prop1 === prop1) ? 9 : 0;\n        break;\n    }\n\n    switch (prop2) {\n      case undefined:\n        t2 = 1;\n        break;\n      case null:\n        t2 = 1;\n        break;\n      case false:\n        t2 = 3;\n        break;\n      case true:\n        t2 = 4;\n        break;\n      case \"\":\n        t2 = 5;\n        break;\n      default:\n        t2 = (prop2 === prop2) ? 9 : 0;\n        break;\n    }\n\n    // one or both is edge case\n    if (t1 !== 9 || t2 !== 9) {\n      return (t1 === t2) ? equal : (t1 < t2);\n    }\n  }\n\n  // if both are numbers (string encoded or not), compare as numbers\n  let cv1 = Number(prop1);\n  let cv2 = Number(prop2);\n\n  if (cv1 === cv1 && cv2 === cv2) {\n    if (cv1 < cv2) return true;\n    if (cv1 > cv2) return false;\n    return equal;\n  }\n\n  if (cv1 === cv1 && cv2 !== cv2) {\n    return true;\n  }\n\n  if (cv2 === cv2 && cv1 !== cv1) {\n    return false;\n  }\n\n  if (prop1 < prop2) return true;\n  if (prop1 > prop2) return false;\n  if (prop1 == prop2) return equal;\n\n  // not strict equal nor less than nor gt so must be mixed types, convert to string and use that to compare\n  cv1 = prop1.toString();\n  cv2 = prop2.toString();\n\n  if (cv1 < cv2) {\n    return true;\n  }\n\n  if (cv1 == cv2) {\n    return equal;\n  }\n\n  return false;\n}\n\n/**\n * @hidden\n * @param {any} prop1\n * @param {any} prop2\n * @param {boolean} equal\n * @returns {boolean}\n */\nexport function gtHelper(prop1: any, prop2: any, equal: boolean): boolean {\n  // 'falsy' and Boolean handling\n  if (!prop1 || !prop2 || prop1 === true || prop2 === true || prop1 !== prop1 || prop2 !== prop2) {\n    let t1: number;\n    let t2: number;\n\n    switch (prop1) {\n      case undefined:\n        t1 = 1;\n        break;\n      case null:\n        t1 = 1;\n        break;\n      case false:\n        t1 = 3;\n        break;\n      case true:\n        t1 = 4;\n        break;\n      case \"\":\n        t1 = 5;\n        break;\n      // NaN 0\n      default:\n        t1 = (prop1 === prop1) ? 9 : 0;\n        break;\n    }\n\n    switch (prop2) {\n      case undefined:\n        t2 = 1;\n        break;\n      case null:\n        t2 = 1;\n        break;\n      case false:\n        t2 = 3;\n        break;\n      case true:\n        t2 = 4;\n        break;\n      case \"\":\n        t2 = 5;\n        break;\n      default:\n        t2 = (prop2 === prop2) ? 9 : 0;\n        break;\n    }\n\n    // one or both is edge case\n    if (t1 !== 9 || t2 !== 9) {\n      return (t1 === t2) ? equal : (t1 > t2);\n    }\n  }\n\n  // if both are numbers (string encoded or not), compare as numbers\n  let cv1 = Number(prop1);\n  let cv2 = Number(prop2);\n  if (cv1 === cv1 && cv2 === cv2) {\n    if (cv1 > cv2) return true;\n    if (cv1 < cv2) return false;\n    return equal;\n  }\n\n  if (cv1 === cv1 && cv2 !== cv2) {\n    return false;\n  }\n\n  if (cv2 === cv2 && cv1 !== cv1) {\n    return true;\n  }\n\n  if (prop1 > prop2) return true;\n  if (prop1 < prop2) return false;\n  if (prop1 == prop2) return equal;\n\n  // not strict equal nor less than nor gt so must be dates or mixed types\n  // convert to string and use that to compare\n  cv1 = prop1.toString();\n  cv2 = prop2.toString();\n\n  if (cv1 > cv2) {\n    return true;\n  }\n\n  if (cv1 == cv2) {\n    return equal;\n  }\n\n  return false;\n}\n\n/**\n * @param {any} prop1\n * @param {any} prop2\n * @param {boolean} descending\n * @returns {number}\n * @hidden\n */\nexport function sortHelper(prop1: any, prop2: any, descending: boolean): number {\n  if (aeqHelper(prop1, prop2)) {\n    return 0;\n  }\n\n  if (ltHelper(prop1, prop2, false)) {\n    return descending ? 1 : -1;\n  }\n\n  if (gtHelper(prop1, prop2, false)) {\n    return descending ? -1 : 1;\n  }\n\n  // not lt, not gt so implied equality-- date compatible\n  return 0;\n}\n","import {Collection} from \"./collection\";\nimport {clone, CloneMethod} from \"./clone\";\nimport {ltHelper, gtHelper, aeqHelper, sortHelper} from \"./helper\";\nimport {Doc} from \"../../common/types\";\nimport {Scorer} from \"../../full-text-search/src/scorer\";\nimport {Query as FullTextSearchQuery} from \"../../full-text-search/src/query_types\";\n\n// used to recursively scan hierarchical transform step object for param substitution\nfunction resolveTransformObject<TData extends object, TNested extends object>(subObj: Collection.Transform<TData, TNested>, params: object, depth: number = 0): Collection.Transform<TData, TNested> {\n  if (++depth >= 10) {\n    return subObj;\n  }\n\n  for (const prop in subObj) {\n    if (typeof subObj[prop] === \"string\" && subObj[prop].indexOf(\"[%lktxp]\") === 0) {\n      const pname = subObj[prop].substring(8);\n      if (params[pname] !== undefined) {\n        subObj[prop] = params[pname];\n      }\n    } else if (typeof subObj[prop] === \"object\") {\n      subObj[prop] = resolveTransformObject(subObj[prop], params, depth);\n    }\n  }\n  return subObj;\n}\n\n// top level utility to resolve an entire (single) transform (array of steps) for parameter substitution\nfunction resolveTransformParams<TData extends object, TNested extends object>(transform: Collection.Transform<TData, TNested>[], params: object): Collection.Transform<TData, TNested>[] {\n  if (params === undefined) {\n    return transform;\n  }\n\n  // iterate all steps in the transform array\n  const resolvedTransform: Collection.Transform<TData, TNested>[] = [];\n  for (let idx = 0; idx < transform.length; idx++) {\n    // clone transform so our scan/replace can operate directly on cloned transform\n    const clonedStep = clone(transform[idx], \"shallow-recurse\");\n    resolvedTransform.push(resolveTransformObject<TData, TNested>(clonedStep, params));\n  }\n\n  return resolvedTransform;\n}\n\nfunction containsCheckFn(a: any) {\n  if (typeof a === \"string\" || Array.isArray(a)) {\n    return (b: any) => (a as any).indexOf(b) !== -1;\n  } else if (typeof a === \"object\" && a !== null) {\n    return (b: string) => Object.hasOwnProperty.call(a, b);\n  }\n  return null;\n}\n\nfunction doQueryOp(val: any, op: object) {\n  for (let p in op) {\n    if (Object.hasOwnProperty.call(op, p)) {\n      return LokiOps[p](val, op[p]);\n    }\n  }\n  return false;\n}\n\n\n/**\n * @hidden\n */\nexport const LokiOps = {\n  // comparison operators\n  // a is the value in the _collection\n  // b is the query value\n  $eq(a: any, b: any): boolean {\n    return a === b;\n  },\n\n  // abstract/loose equality\n  $aeq(a: any, b: any): boolean {\n    return a == b;\n  },\n\n  $ne(a: any, b: any): boolean {\n    // ecma 5 safe test for NaN\n    if (b !== b) {\n      // ecma 5 test value is not NaN\n      return (a === a);\n    }\n    return a !== b;\n  },\n\n  // date equality / loki abstract equality test\n  $dteq(a: any, b: any): boolean {\n    return aeqHelper(a, b);\n  },\n\n  $gt(a: any, b: any): boolean {\n    return gtHelper(a, b, false);\n  },\n\n  $gte(a: any, b: any): boolean {\n    return gtHelper(a, b, true);\n  },\n\n  $lt(a: any, b: any): boolean {\n    return ltHelper(a, b, false);\n  },\n\n  $lte(a: any, b: any): boolean {\n    return ltHelper(a, b, true);\n  },\n\n  $between(a: any, range: [any, any]): boolean {\n    if (a === undefined || a === null) return false;\n    return (gtHelper(a, range[0], true) && ltHelper(a, range[1], true));\n  },\n\n  // lightweight javascript comparisons\n  $jgt(a: any, b: any): boolean {\n    return a > b;\n  },\n\n  $jgte(a: any, b: any): boolean {\n    return a >= b;\n  },\n\n  $jlt(a: any, b: any): boolean {\n    return a < b;\n  },\n\n  $jlte(a: any, b: any): boolean {\n    return a <= b;\n  },\n\n  $jbetween(a: any, range: [any, any]): boolean {\n    if (a === undefined || a === null) return false;\n    return (a >= range[0] && a <= range[1]);\n  },\n\n  $in(a: any, b: any): boolean {\n    return b.indexOf(a) !== -1;\n  },\n\n  $nin(a: any, b: any): boolean {\n    return b.indexOf(a) === -1;\n  },\n\n  $keyin(a: string, b: object): boolean {\n    return a in b;\n  },\n\n  $nkeyin(a: string, b: object): boolean {\n    return !(a in b);\n  },\n\n  $definedin(a: string, b: object): boolean {\n    return b[a] !== undefined;\n  },\n\n  $undefinedin(a: string, b: object): boolean {\n    return b[a] === undefined;\n  },\n\n  $regex(a: string, b: RegExp): boolean {\n    return b.test(a);\n  },\n\n  $containsNone(a: any, b: any): boolean {\n    return !LokiOps.$containsAny(a, b);\n  },\n\n  $containsAny(a: any, b: any): boolean {\n    const checkFn = containsCheckFn(a);\n    if (checkFn !== null) {\n      return (Array.isArray(b)) ? (b.some(checkFn)) : (checkFn(b));\n    }\n    return false;\n  },\n\n  $contains(a: any, b: any): boolean {\n    const checkFn = containsCheckFn(a);\n    if (checkFn !== null) {\n      return (Array.isArray(b)) ? (b.every(checkFn)) : (checkFn(b));\n    }\n    return false;\n  },\n\n  $type(a: any, b: any): boolean {\n    let type: string = typeof a;\n    if (type === \"object\") {\n      if (Array.isArray(a)) {\n        type = \"array\";\n      } else if (a instanceof Date) {\n        type = \"date\";\n      }\n    }\n    return (typeof b !== \"object\") ? (type === b) : doQueryOp(type, b);\n  },\n\n  $finite(a: number, b: boolean): boolean {\n    return (b === isFinite(a));\n  },\n\n  $size(a: any, b: any): boolean {\n    if (Array.isArray(a)) {\n      return (typeof b !== \"object\") ? (a.length === b) : doQueryOp(a.length, b);\n    }\n    return false;\n  },\n\n  $len(a: any, b: any): boolean {\n    if (typeof a === \"string\") {\n      return (typeof b !== \"object\") ? (a.length === b) : doQueryOp(a.length, b);\n    }\n    return false;\n  },\n\n  $where(a: any, b: any): boolean {\n    return b(a) === true;\n  },\n\n  // field-level logical operators\n  // a is the value in the _collection\n  // b is the nested query operation (for '$not')\n  //   or an array of nested query operations (for '$and' and '$or')\n  $not(a: any, b: any): boolean {\n    return !doQueryOp(a, b);\n  },\n\n  $and(a: any, b: any): boolean {\n    for (let idx = 0, len = b.length; idx < len; idx++) {\n      if (!doQueryOp(a, b[idx])) {\n        return false;\n      }\n    }\n    return true;\n  },\n\n  $or(a: any, b: any): boolean {\n    for (let idx = 0, len = b.length; idx < len; idx++) {\n      if (doQueryOp(a, b[idx])) {\n        return true;\n      }\n    }\n    return false;\n  }\n};\n\n// if an op is registered in this object, our 'calculateRange' can use it with our binary indices.\n// if the op is registered to a function, we will run that function/op as a 2nd pass filter on results.\n// those 2nd pass filter functions should be similar to LokiOps functions, accepting 2 vals to compare.\nconst indexedOps = {\n  $eq: LokiOps.$eq,\n  $aeq: true,\n  $dteq: true,\n  $gt: true,\n  $gte: true,\n  $lt: true,\n  $lte: true,\n  $in: true,\n  $between: true\n};\n\n/**\n * ResultSet class allowing chainable queries.  Intended to be instanced internally.\n *    Collection.find(), Collection.where(), and Collection.chain() instantiate this.\n *\n * @example\n *    mycollection.chain()\n *      .find({ 'doors' : 4 })\n *      .where(function(obj) { return obj.name === 'Toyota' })\n *      .data();\n *\n * @param <TData> - the data type\n * @param <TNested> - nested properties of data type\n */\nexport class ResultSet<TData extends object = object, TNested extends object = object> {\n\n  public _collection: Collection<TData, TNested>;\n  public _filteredRows: number[] = [];\n  public _filterInitialized: boolean = false;\n  // Holds the scoring result of the last full-text search.\n  private _scoring: Scorer.ScoreResults = null;\n\n  /**\n   * Constructor.\n   * @param {Collection} collection - the collection which this ResultSet will query against\n   */\n  constructor(collection: Collection<TData, TNested>) {\n    // retain reference to collection we are querying against\n    this._collection = collection;\n  }\n\n  /**\n   * Reset the ResultSet to its initial state.\n   * @returns {ResultSet} Reference to this ResultSet, for future chain operations.\n   */\n  public reset(): this {\n    if (this._filteredRows.length > 0) {\n      this._filteredRows = [];\n    }\n    this._filterInitialized = false;\n    return this;\n  }\n\n  /**\n   * Override of toJSON to avoid circular references\n   */\n  public toJSON(): ResultSet<TData, TNested> {\n    const copy = this.copy();\n    copy._collection = <never>null;\n    return copy;\n  }\n\n  /**\n   * Allows you to limit the number of documents passed to next chain operation.\n   * A ResultSet copy() is made to avoid altering original ResultSet.\n   * @param {int} qty - The number of documents to return.\n   * @returns {ResultSet} Returns a copy of the ResultSet, limited by qty, for subsequent chain ops.\n   */\n  public limit(qty: number): this {\n    // if this has no filters applied, we need to populate filteredRows first\n    if (!this._filterInitialized && this._filteredRows.length === 0) {\n      this._filteredRows = this._collection._prepareFullDocIndex();\n    }\n\n    this._filteredRows = this._filteredRows.slice(0, qty);\n    this._filterInitialized = true;\n    return this;\n  }\n\n  /**\n   * Used for skipping 'pos' number of documents in the ResultSet.\n   * @param {int} pos - Number of documents to skip; all preceding documents are filtered out.\n   * @returns {ResultSet} Returns a copy of the ResultSet, containing docs starting at 'pos' for subsequent chain ops.\n   */\n  public offset(pos: number): this {\n    // if this has no filters applied, we need to populate filteredRows first\n    if (!this._filterInitialized && this._filteredRows.length === 0) {\n      this._filteredRows = this._collection._prepareFullDocIndex();\n    }\n\n    this._filteredRows = this._filteredRows.slice(pos);\n    this._filterInitialized = true;\n    return this;\n  }\n\n  /**\n   * To support reuse of ResultSet in branched query situations.\n   * @returns {ResultSet} Returns a copy of the ResultSet (set) but the underlying document references will be the same.\n   */\n  public copy(): ResultSet<TData, TNested> {\n    const result = new ResultSet<TData, TNested>(this._collection);\n    result._filteredRows = this._filteredRows.slice();\n    result._filterInitialized = this._filterInitialized;\n    return result;\n  }\n\n  /**\n   * Executes a named collection transform or raw array of transform steps against the ResultSet.\n   * @param {(string|array)} transform - name of collection transform or raw transform array\n   * @param {object} [parameters=] - object property hash of parameters, if the transform requires them.\n   * @returns {ResultSet} either (this) ResultSet or a clone of of this ResultSet (depending on steps)\n   */\n  public transform(transform: string | Collection.Transform<TData, TNested>[], parameters?: object): this {\n    // if transform is name, then do lookup first\n    if (typeof transform === \"string\") {\n      transform = this._collection._transforms[transform];\n    }\n\n    if (parameters !== undefined) {\n      transform = resolveTransformParams(transform, parameters);\n    }\n\n    let rs = this;\n    for (let idx = 0; idx < transform.length; idx++) {\n      const step = transform[idx];\n\n      switch (step.type) {\n        case \"find\":\n          rs.find(step.value as ResultSet.Query<Doc<TData & TNested>>);\n          break;\n        case \"where\":\n          rs.where(step.value as (obj: Doc<TData & TNested>) => boolean);\n          break;\n        case \"simplesort\":\n          rs.simplesort(step.property, step.options);\n          break;\n        case \"compoundsort\":\n          rs.compoundsort(step.value);\n          break;\n        case \"sort\":\n          rs.sort(step.value);\n          break;\n        case \"sortByScoring\":\n          rs.sortByScoring(step.desc);\n          break;\n        case \"limit\":\n          rs = rs.limit(step.value);\n          break; // limit makes copy so update reference\n        case \"offset\":\n          rs = rs.offset(step.value);\n          break; // offset makes copy so update reference\n        case \"map\":\n          rs = rs.map(step.value, step.dataOptions) as any as this;\n          break;\n        case \"eqJoin\":\n          rs = rs.eqJoin(step.joinData, step.leftJoinKey, step.rightJoinKey, step.mapFun, step.dataOptions) as this;\n          break;\n        // following cases break chain by returning array data so make any of these last in transform steps\n        case \"mapReduce\":\n          rs = rs.mapReduce(step.mapFunction, step.reduceFunction);\n          break;\n        // following cases update documents in current filtered ResultSet (use carefully)\n        case \"update\":\n          rs.update(step.value);\n          break;\n        case \"remove\":\n          rs.remove();\n          break;\n        default:\n          break;\n      }\n    }\n    return rs;\n  }\n\n  /**\n   * User supplied compare function is provided two documents to compare. (chainable)\n   * @example\n   *    rslt.sort(function(obj1, obj2) {\n\t *      if (obj1.name === obj2.name) return 0;\n\t *      if (obj1.name > obj2.name) return 1;\n\t *      if (obj1.name < obj2.name) return -1;\n\t *    });\n   * @param {function} comparefun - A javascript compare function used for sorting.\n   * @returns {ResultSet} Reference to this ResultSet, sorted, for future chain operations.\n   */\n  public sort(comparefun: (a: Doc<TData & TNested>, b: Doc<TData & TNested>) => number): this {\n    // if this has no filters applied, just we need to populate filteredRows first\n    if (!this._filterInitialized && this._filteredRows.length === 0) {\n      this._filteredRows = this._collection._prepareFullDocIndex();\n    }\n\n    const data = this._collection._data;\n    const wrappedComparer = (a: number, b: number) => comparefun(data[a], data[b]);\n\n    this._filteredRows.sort(wrappedComparer);\n\n    return this;\n  }\n\n  /**\n   * Simpler, loose evaluation for user to sort based on a property name. (chainable).\n   * Sorting based on the same lt/gt helper functions used for binary indices.\n   * @param {string} propname - name of property to sort by.\n   * @param {boolean|object=} options - boolean for sort descending or options object\n   * @param {boolean} [options.desc=false] - whether to sort descending\n   * @param {boolean} [options.disableIndexIntersect=false] - whether we should explicitly not use array intersection.\n   * @param {boolean} [options.forceIndexIntersect=false] - force array intersection (if binary index exists).\n   * @param {boolean} [options.useJavascriptSorting=false] - whether results are sorted via basic javascript sort.\n   * @returns {ResultSet} Reference to this ResultSet, sorted, for future chain operations.\n   */\n  public simplesort(propname: keyof (TData & TNested), options: boolean | ResultSet.SimpleSortOptions = {desc: false}): this {\n    if (typeof options === \"boolean\") {\n      options = {\n        desc: options\n      };\n    }\n\n    // If already filtered, but we want to leverage binary index on sort.\n    // This will use custom array intection algorithm.\n    if (!options.disableIndexIntersect && this._collection._binaryIndices.hasOwnProperty(propname)\n      && this._filterInitialized) {\n\n      const eff = this._collection._data.length / this._filteredRows.length;\n      // when javascript sort fallback is enabled, you generally need more than ~17% of total docs in resultset\n      // before array intersect is determined to be the faster algorithm, otherwise leave at 10% for loki sort.\n      const targetEff = options.useJavascriptSorting ? 6 : 10;\n\n      // anything more than ratio of 10:1 (total documents/current results) should use old sort code path\n      // So we will only use array intersection if you have more than 10% of total docs in your current ResultSet.\n      if (eff <= targetEff || options.forceIndexIntersect) {\n        const io = {};\n        // set up hashobject for simple 'inclusion test' with existing (filtered) results\n        for (let i = 0; i < this._filteredRows.length; i++) {\n          io[this._filteredRows[i]] = true;\n        }\n        // grab full sorted binary index array and filter by existing results\n        this._filteredRows = this._collection._binaryIndices[propname].values.filter((n: string) => {\n          return io[n];\n        });\n\n        if (options.desc) {\n          this._filteredRows.reverse();\n        }\n\n        return this;\n      }\n    }\n\n    if (options.useJavascriptSorting) {\n      return this.sort((obj1: TData & TNested, obj2: TData & TNested): number => {\n        if (obj1[propname] === obj2[propname]) return 0;\n        if (obj1[propname] > obj2[propname]) return 1;\n        return -1;\n      });\n    }\n\n    // if this has no filters applied, just we need to populate filteredRows first\n    if (!this._filterInitialized && this._filteredRows.length === 0) {\n      // if we have a binary index and no other filters applied, we can use that instead of sorting (again)\n      if (this._collection._binaryIndices[propname] !== undefined) {\n        // make sure index is up-to-date\n        this._collection.ensureIndex(propname as keyof TData);\n        // copy index values into filteredRows\n        this._filteredRows = this._collection._binaryIndices[propname].values.slice(0);\n\n        if (options.desc) {\n          this._filteredRows.reverse();\n        }\n\n        // we are done, return this (ResultSet) for further chain ops\n        return this;\n      }\n      // otherwise initialize array for sort below\n      else {\n        this._filteredRows = this._collection._prepareFullDocIndex();\n      }\n    }\n\n    const data = this._collection._data;\n    const wrappedComparer = (a: number, b: number) => {\n      return sortHelper(data[a][propname], data[b][propname], (options as ResultSet.SimpleSortOptions).desc);\n    };\n\n    this._filteredRows.sort(wrappedComparer);\n\n    return this;\n  }\n\n  /**\n   * Allows sorting a ResultSet based on multiple columns.\n   * @example\n   * // to sort by age and then name (both ascending)\n   * rs.compoundsort(['age', 'name']);\n   * // to sort by age (ascending) and then by name (descending)\n   * rs.compoundsort(['age', ['name', true]);\n   * @param {array} properties - array of property names or subarray of [propertyname, isdesc] used evaluate sort order\n   * @returns {ResultSet} Reference to this ResultSet, sorted, for future chain operations.\n   */\n  public compoundsort(properties: (keyof (TData & TNested) | [keyof (TData & TNested), boolean])[]): this {\n    if (properties.length === 0) {\n      throw new Error(\"Invalid call to compoundsort, need at least one property\");\n    }\n\n    if (properties.length === 1) {\n      const prop = properties[0];\n      if (typeof prop === \"string\") {\n        return this.simplesort(prop, false);\n      } else {\n        return this.simplesort(prop[0] as keyof (TData & TNested), prop[1] as boolean | ResultSet.SimpleSortOptions);\n      }\n    }\n\n    // unify the structure of 'properties' to avoid checking it repeatedly while sorting\n    for (let i = 0, len = properties.length; i < len; i++) {\n      const prop = properties[i];\n      if (typeof prop === \"string\") {\n        properties[i] = [prop, false];\n      }\n    }\n\n    // if this has no filters applied, just we need to populate filteredRows first\n    if (!this._filterInitialized && this._filteredRows.length === 0) {\n      this._filteredRows = this._collection._prepareFullDocIndex();\n    }\n\n    const data = this._collection._data;\n    const wrappedComparer = (a: number, b: number) =>\n      this._compoundeval(properties as [keyof (TData & TNested), boolean][], data[a], data[b]);\n\n    this._filteredRows.sort(wrappedComparer);\n\n    return this;\n  }\n\n  /**\n   * Helper function for compoundsort(), performing individual object comparisons\n   * @param {Array} properties - array of property names, in order, by which to evaluate sort order\n   * @param {object} obj1 - first object to compare\n   * @param {object} obj2 - second object to compare\n   * @returns {number} 0, -1, or 1 to designate if identical (sortwise) or which should be first\n   */\n  private _compoundeval(properties: [keyof (TData & TNested), boolean][], obj1: TData & TNested, obj2: TData & TNested): number {\n    for (let i = 0, len = properties.length; i < len; i++) {\n      const prop = properties[i];\n      const field = prop[0];\n      const res = sortHelper(obj1[field], obj2[field], prop[1]);\n      if (res !== 0) {\n        return res;\n      }\n    }\n    return 0;\n  }\n\n  /**\n   * Sorts the ResultSet based on the last full-text-search scoring.\n   * @param {boolean} [ascending=false] - sort ascending\n   * @returns {ResultSet}\n   */\n  public sortByScoring(ascending = false): this {\n    if (this._scoring === null) {\n      throw new Error(\"No scoring available\");\n    }\n\n    if (ascending) {\n      this._filteredRows.sort((a: number, b: number) => this._scoring[a].score - this._scoring[b].score);\n    } else {\n      this._filteredRows.sort((a: number, b: number) => this._scoring[b].score - this._scoring[a].score);\n    }\n\n    return this;\n  }\n\n  /**\n   * Returns the scoring of the last full-text-search.\n   * @returns {ScoreResult[]}\n   */\n  public getScoring(): Scorer.ScoreResult[] {\n    if (this._scoring === null) {\n      throw new Error(\"No scoring available\");\n    }\n    const scoring: Scorer.ScoreResult[] = [];\n    for (let i = 0; i < this._filteredRows.length; i++) {\n      scoring.push(this._scoring[this._filteredRows[i]]);\n    }\n    return scoring;\n  }\n\n  /**\n   * Oversee the operation of OR'ed query expressions.\n   * OR'ed expression evaluation runs each expression individually against the full collection,\n   * and finally does a set OR on each expression's results.\n   * Each evaluation can utilize a binary index to prevent multiple linear array scans.\n   * @param {array} expressionArray - array of expressions\n   * @returns {ResultSet} this ResultSet for further chain ops.\n   */\n  public findOr(expressionArray: ResultSet.Query<Doc<TData & TNested>>[]): this {\n    const docset = [];\n    const idxset = [];\n    const origCount = this.count();\n\n    // If filter is already initialized, then we query against only those items already in filter.\n    // This means no index utilization for fields, so hopefully its filtered to a smallish filteredRows.\n    for (let ei = 0, elen = expressionArray.length; ei < elen; ei++) {\n      // we need to branch existing query to run each filter separately and combine results\n      const fr = this.copy().find(expressionArray[ei])._filteredRows;\n      const frlen = fr.length;\n      // if the find operation did not reduce the initial set, then the initial set is the actual result\n      if (frlen === origCount) {\n        return this;\n      }\n\n      // add any document 'hits'\n      for (let fri = 0; fri < frlen; fri++) {\n        const idx = fr[fri];\n        if (idxset[idx] === undefined) {\n          idxset[idx] = true;\n          docset.push(idx);\n        }\n      }\n    }\n\n    this._filteredRows = docset;\n    this._filterInitialized = true;\n\n    return this;\n  }\n\n  public $or(expressionArray: ResultSet.Query<Doc<TData & TNested>>[]): this {\n    return this.findOr(expressionArray);\n  }\n\n  /**\n   * Oversee the operation of AND'ed query expressions.\n   * AND'ed expression evaluation runs each expression progressively against the full collection,\n   * internally utilizing existing chained ResultSet functionality.\n   * Only the first filter can utilize a binary index.\n   * @param {array} expressionArray - array of expressions\n   * @returns {ResultSet} this ResultSet for further chain ops.\n   */\n  public findAnd(expressionArray: ResultSet.Query<Doc<TData & TNested>>[]): this {\n    // we have already implementing method chaining in this (our ResultSet class)\n    // so lets just progressively apply user supplied and filters\n    for (let i = 0, len = expressionArray.length; i < len; i++) {\n      if (this.count() === 0) {\n        return this;\n      }\n      this.find(expressionArray[i]);\n    }\n    return this;\n  }\n\n  public $and(expressionArray: ResultSet.Query<Doc<TData & TNested>>[]): this {\n    return this.findAnd(expressionArray);\n  }\n\n  /**\n   * Used for querying via a mongo-style query object.\n   *\n   * @param {object} query - A mongo-style query object used for filtering current results.\n   * @param {boolean} firstOnly - (Optional) Used by collection.findOne() - flag if this was invoked via findOne()\n   * @returns {ResultSet} this ResultSet for further chain ops.\n   */\n  public find(query?: ResultSet.Query<Doc<TData & TNested>>, firstOnly = false): this {\n    if (this._collection._data.length === 0) {\n      this._filteredRows = [];\n      this._filterInitialized = true;\n      return this;\n    }\n\n    const queryObject = query || \"getAll\";\n    let property: any;\n    let queryObjectOp: any;\n    let value: any;\n\n    if (typeof queryObject === \"object\") {\n      let filters = [];\n      for (let p in queryObject) {\n        let obj = {};\n        obj[p as any] = queryObject[p];\n        filters.push(obj);\n\n        if (queryObject[p] !== undefined) {\n          property = p;\n          queryObjectOp = queryObject[p];\n        }\n      }\n      // if more than one expression in single query object,\n      // convert implicit $and to explicit $and\n      if (filters.length > 1) {\n        return this.find({\"$and\": filters} as any, firstOnly);\n      }\n    }\n\n    // apply no filters if they want all\n    if (!property || queryObject === \"getAll\") {\n      if (firstOnly) {\n        this._filteredRows = (this._collection._data.length > 0) ? [0] : [];\n        this._filterInitialized = true;\n      }\n      return this;\n    }\n\n    // injecting $and and $or expression tree evaluation here.\n    if (property === \"$and\" || property === \"$or\") {\n      this[property](queryObjectOp);\n\n      // for chained find with firstOnly,\n      if (firstOnly && this._filteredRows.length > 1) {\n        this._filteredRows = this._filteredRows.slice(0, 1);\n      }\n\n      return this;\n    }\n\n    // see if query object is in shorthand mode (assuming eq operator)\n    let operator = \"\";\n    if (queryObjectOp === null || (typeof queryObjectOp !== \"object\" || queryObjectOp instanceof Date)) {\n      operator = \"$eq\";\n      value = queryObjectOp;\n    } else if (typeof queryObjectOp === \"object\") {\n      for (let key in queryObjectOp) {\n        if (queryObjectOp[key] !== undefined) {\n          operator = key;\n          value = queryObjectOp[key];\n          break;\n        }\n      }\n    } else {\n      throw new Error(\"Do not know what you want to do.\");\n    }\n\n    // for regex ops, precompile\n    if (operator === \"$regex\") {\n      if (Array.isArray(value)) {\n        value = new RegExp(value[0], value[1]);\n      } else if (!(value instanceof RegExp)) {\n        value = new RegExp(value as any);\n      }\n    }\n\n    // if an index exists for the property being queried against, use it\n    // for now only enabling where it is the first filter applied and prop is indexed\n    const doIndexCheck = !this._filterInitialized;\n\n    let searchByIndex = false;\n    if (doIndexCheck && this._collection._binaryIndices[property] && indexedOps[operator]) {\n      // this is where our lazy index rebuilding will take place\n      // basically we will leave all indexes dirty until we need them\n      // so here we will rebuild only the index tied to this property\n      // ensureIndex() will only rebuild if flagged as dirty since we are not passing force=true param\n      if (this._collection._adaptiveBinaryIndices !== true) {\n        this._collection.ensureIndex(property);\n      }\n      searchByIndex = true;\n    }\n\n    // the comparison function\n    const fun = LokiOps[operator];\n\n    // \"shortcut\" for collection data\n    const data = this._collection._data;\n\n    // Query executed differently depending on :\n    //    - whether the property being queried has an index defined\n    //    - if chained, we handle first pass differently for initial filteredRows[] population\n    //\n    // For performance reasons, each case has its own if block to minimize in-loop calculations\n\n    let result: number[] = [];\n    // If the filteredRows[] is already initialized, use it\n    if (this._filterInitialized) {\n      let filter = this._filteredRows;\n\n      if (property === \"$fts\") {\n        this._scoring = this._collection._fullTextSearch.search(queryObject.$fts as FullTextSearchQuery);\n        let keys = Object.keys(this._scoring);\n        for (let i = 0; i < keys.length; i++) {\n          if (filter.indexOf(+keys[i]) !== -1) {\n            result.push(+keys[i]);\n          }\n        }\n      } else if (this._collection._constraints.unique[property] !== undefined && operator === \"$eq\") {\n        // Use unique constraint for search.\n        let row = this._collection._constraints.unique[property].get(value);\n        if (filter.indexOf(row) !== -1) {\n          result.push(row);\n        }\n      } else {\n        for (let i = 0; i < filter.length; i++) {\n          let rowIdx = filter[i];\n          if (fun(data[rowIdx][property], value)) {\n            result.push(rowIdx);\n          }\n        }\n      }\n\n      this._filteredRows = result;\n      this._filterInitialized = true; // next time work against filteredRows[]\n      return this;\n    }\n\n    this._filteredRows = result;\n    this._filterInitialized = true; // next time work against filteredRows[]\n\n    if (property === \"$fts\") {\n      this._scoring = this._collection._fullTextSearch.search(queryObject.$fts as FullTextSearchQuery);\n      let keys = Object.keys(this._scoring);\n      for (let i = 0; i < keys.length; i++) {\n        result.push(+keys[i]);\n      }\n      return this;\n    }\n\n    // Use unique constraint for search.\n    if (this._collection._constraints.unique[property] !== undefined && operator === \"$eq\") {\n      result.push(this._collection._constraints.unique[property].get(value));\n      return this;\n    }\n\n    // first chained query so work against data[] but put results in filteredRows\n    // if not searching by index\n    if (!searchByIndex) {\n      for (let i = 0; i < data.length; i++) {\n        if (fun(data[i][property], value)) {\n          result.push(i);\n          if (firstOnly) {\n            return this;\n          }\n        }\n      }\n      return this;\n    }\n\n    let index = this._collection._binaryIndices[property];\n    if (operator !== \"$in\") {\n      // search by index\n      const segm = this._collection.calculateRange(operator, property, value);\n      for (let i = segm[0]; i <= segm[1]; i++) {\n        if (indexedOps[operator] !== true) {\n          // must be a function, implying 2nd phase filtering of results from calculateRange\n          if (indexedOps[operator](data[index.values[i]][property], value)) {\n            result.push(index.values[i]);\n            if (firstOnly) {\n              return this;\n            }\n          }\n        } else {\n          result.push(index.values[i]);\n          if (firstOnly) {\n            return this;\n          }\n        }\n      }\n    } else {\n      const idxset = [];\n      // query each value '$eq' operator and merge the segment results.\n      for (let j = 0, len = value.length; j < len; j++) {\n        const segm = this._collection.calculateRange(\"$eq\", property, value[j]);\n        for (let i = segm[0]; i <= segm[1]; i++) {\n          if (idxset[i] === undefined) {\n            idxset[i] = true;\n            result.push(index.values[i]);\n          }\n          if (firstOnly) {\n            return this;\n          }\n        }\n      }\n    }\n    return this;\n  }\n\n\n  /**\n   * Used for filtering via a javascript filter function.\n   * @param {function} fun - A javascript function used for filtering current results by.\n   * @returns {ResultSet} this ResultSet for further chain ops.\n   */\n  public where(fun: (obj: Doc<TData & TNested>) => boolean): this {\n    let viewFunction;\n    let result = [];\n\n    if (\"function\" === typeof fun) {\n      viewFunction = fun;\n    } else {\n      throw new TypeError(\"Argument is not a stored view or a function\");\n    }\n\n    // If the filteredRows[] is already initialized, use it\n    if (this._filterInitialized) {\n      let j = this._filteredRows.length;\n\n      while (j--) {\n        if (viewFunction(this._collection._data[this._filteredRows[j]]) === true) {\n          result.push(this._filteredRows[j]);\n        }\n      }\n\n      this._filteredRows = result;\n\n      return this;\n    }\n    // otherwise this is initial chained op, work against data, push into filteredRows[]\n    else {\n      let k = this._collection._data.length;\n\n      while (k--) {\n        if (viewFunction(this._collection._data[k]) === true) {\n          result.push(k);\n        }\n      }\n\n      this._filteredRows = result;\n      this._filterInitialized = true;\n\n      return this;\n    }\n  }\n\n  /**\n   * Returns the number of documents in the ResultSet.\n   * @returns {number} The number of documents in the ResultSet.\n   */\n  public count(): number {\n    if (this._filterInitialized) {\n      return this._filteredRows.length;\n    }\n    return this._collection.count();\n  }\n\n  /**\n   * Terminates the chain and returns array of filtered documents\n   * @param {object} options\n   * @param {boolean} [options.forceClones] - Allows forcing the return of cloned objects even when\n   *        the collection is not configured for clone object.\n   * @param {string} [options.forceCloneMethod] - Allows overriding the default or collection specified cloning method.\n   *        Possible values 'parse-stringify', 'deep', and 'shallow' and\n   * @param {boolean} [options.removeMeta] - will force clones and strip $loki and meta properties from documents\n   *\n   * @returns {Array} Array of documents in the ResultSet\n   */\n  public data(options: ResultSet.DataOptions = {}): Doc<TData & TNested>[] {\n    let forceClones: boolean;\n    let forceCloneMethod: CloneMethod;\n    let removeMeta: boolean;\n    (\n      {\n        forceClones = false,\n        forceCloneMethod = this._collection._cloneMethod,\n        removeMeta = false\n      } = options\n    );\n\n    let result = [];\n    let data = this._collection._data;\n    let obj;\n    let method: CloneMethod;\n\n    // if user opts to strip meta, then force clones and use 'shallow' if 'force' options are not present\n    if (removeMeta && !forceClones) {\n      forceClones = true;\n      forceCloneMethod = \"shallow\";\n    }\n\n    // if collection has delta changes active, then force clones and use CloneMethod.DEEP for effective change tracking of nested objects\n    if (!this._collection._disableDeltaChangesApi) {\n      forceClones = true;\n      forceCloneMethod = \"deep\";\n    }\n\n    // if this has no filters applied, just return collection.data\n    if (!this._filterInitialized) {\n      if (this._filteredRows.length === 0) {\n        // determine whether we need to clone objects or not\n        if (this._collection._cloneObjects || forceClones) {\n          method = forceCloneMethod;\n\n          for (let i = 0; i < data.length; i++) {\n            obj = this._collection._defineNestedProperties(clone(data[i], method));\n            if (removeMeta) {\n              delete obj.$loki;\n              delete obj.meta;\n            }\n            result.push(obj);\n          }\n          return result;\n        }\n        // otherwise we are not cloning so return sliced array with same object references\n        else {\n          return data.slice();\n        }\n      } else {\n        // filteredRows must have been set manually, so use it\n        this._filterInitialized = true;\n      }\n    }\n\n    const fr = this._filteredRows;\n    if (this._collection._cloneObjects || forceClones) {\n      method = forceCloneMethod;\n      for (let i = 0; i < fr.length; i++) {\n        obj = this._collection._defineNestedProperties(clone(data[fr[i]], method));\n        if (removeMeta) {\n          delete obj.$loki;\n          delete obj.meta;\n        }\n        result.push(obj);\n      }\n    } else {\n      for (let i = 0; i < fr.length; i++) {\n        result.push(data[fr[i]]);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Used to run an update operation on all documents currently in the ResultSet.\n   * @param {function} updateFunction - User supplied updateFunction(obj) will be executed for each document object.\n   * @returns {ResultSet} this ResultSet for further chain ops.\n   */\n  public update(updateFunction: (obj: Doc<TData & TNested>) => Doc<TData & TNested>): this {\n    // if this has no filters applied, we need to populate filteredRows first\n    if (!this._filterInitialized && this._filteredRows.length === 0) {\n      this._filteredRows = this._collection._prepareFullDocIndex();\n    }\n\n    const len = this._filteredRows.length;\n    const rcd = this._collection._data;\n\n    // pass in each document object currently in ResultSet to user supplied updateFunction\n    for (let idx = 0; idx < len; idx++) {\n      // if we have cloning option specified or are doing differential delta changes, clone object first\n      if (this._collection._cloneObjects || !this._collection._disableDeltaChangesApi) {\n        const obj = clone(rcd[this._filteredRows[idx]], this._collection._cloneMethod);\n        updateFunction(obj);\n        this._collection.update(obj);\n      }\n      else {\n        // no need to clone, so just perform update on collection data object instance\n        updateFunction(rcd[this._filteredRows[idx]]);\n        this._collection.update(rcd[this._filteredRows[idx]]);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes all document objects which are currently in ResultSet from collection (as well as ResultSet)\n   * @returns {ResultSet} this (empty) ResultSet for further chain ops.\n   */\n  public remove(): this {\n    // if this has no filters applied, we need to populate filteredRows first\n    if (!this._filterInitialized && this._filteredRows.length === 0) {\n      this._filteredRows = this._collection._prepareFullDocIndex();\n    }\n    this._collection.remove(this.data());\n    this._filteredRows = [];\n    return this;\n  }\n\n  /**\n   * data transformation via user supplied functions\n   *\n   * @param {function} mapFunction - this function accepts a single document for you to transform and return\n   * @param {function} reduceFunction - this function accepts many (array of map outputs) and returns single value\n   * @returns {value} The output of your reduceFunction\n   */\n  public mapReduce<T, U>(mapFunction: (item: Doc<TData & TNested>, index: number, array: Doc<TData & TNested>[]) => T,\n                         reduceFunction: (array: T[]) => U): U {\n    try {\n      return reduceFunction(this.data().map(mapFunction));\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  /**\n   * Left joining two sets of data. Join keys can be defined or calculated properties\n   * eqJoin expects the right join key values to be unique.  Otherwise left data will be joined on the last joinData object with that key\n   * @param {Array|ResultSet|Collection} joinData - Data array to join to.\n   * @param {(string|function)} leftJoinKey - Property name in this result set to join on or a function to produce a value to join on\n   * @param {(string|function)} rightJoinKey - Property name in the joinData to join on or a function to produce a value to join on\n   * @param {function} [mapFun=] - a function that receives each matching pair and maps them into output objects - function(left,right){return joinedObject}\n   * @param {object} [dataOptions=] - optional options to apply to data() calls for left and right sides\n   * @param {boolean} dataOptions.removeMeta - allows removing meta before calling mapFun\n   * @param {boolean} dataOptions.forceClones - forcing the return of cloned objects to your map object\n   * @param {string} dataOptions.forceCloneMethod - allows overriding the default or collection specified cloning method\n   * @returns {ResultSet} A ResultSet with data in the format [{left: leftObj, right: rightObj}]\n   */\n  public eqJoin(joinData: Collection<any> | ResultSet<any> | any[], leftJoinKey: string | ((obj: any) => string),\n                rightJoinKey: string | ((obj: any) => string), mapFun?: (left: any, right: any) => any,\n                dataOptions?: ResultSet.DataOptions): ResultSet<any, any> {\n    let rightData = [];\n    let rightDataLength;\n    let key;\n    let result = [];\n    let leftKeyisFunction = typeof leftJoinKey === \"function\";\n    let rightKeyisFunction = typeof rightJoinKey === \"function\";\n    let joinMap = {};\n\n    //get the left data\n    let leftData = this.data(dataOptions);\n    let leftDataLength = leftData.length;\n\n    //get the right data\n    if (joinData instanceof Collection) {\n      rightData = joinData.chain().data(dataOptions);\n    } else if (joinData instanceof ResultSet) {\n      rightData = joinData.data(dataOptions);\n    } else if (Array.isArray(joinData)) {\n      rightData = joinData;\n    } else {\n      throw new TypeError(\"joinData needs to be an array or result set\");\n    }\n    rightDataLength = rightData.length;\n\n    //construct a lookup table\n    for (let i = 0; i < rightDataLength; i++) {\n      key = rightKeyisFunction\n        ? (rightJoinKey as (obj: any) => string)(rightData[i])\n        : rightData[i][rightJoinKey as string];\n      joinMap[key] = rightData[i];\n    }\n\n    if (!mapFun) {\n      mapFun = (left: any, right: any) => ({\n        left,\n        right\n      });\n    }\n\n    //Run map function over each object in the ResultSet\n    for (let j = 0; j < leftDataLength; j++) {\n      key = leftKeyisFunction\n        ? (leftJoinKey as (obj: any) => string)(leftData[j])\n        : leftData[j][leftJoinKey as string];\n      result.push(mapFun(leftData[j], joinMap[key] || {}));\n    }\n\n    //return a new ResultSet with no filters\n    this._collection = new Collection(\"joinData\");\n    this._collection.insert(result);\n    this._filteredRows = [];\n    this._filterInitialized = false;\n\n    return this;\n  }\n\n  /**\n   * Applies a map function into a new collection for further chaining.\n   * @param {function} mapFun - javascript map function\n   * @param {object} [dataOptions=] - options to data() before input to your map function\n   * @param {boolean} dataOptions.removeMeta - allows removing meta before calling mapFun\n   * @param {boolean} dataOptions.forceClones - forcing the return of cloned objects to your map object\n   * @param {string} dataOptions.forceCloneMethod - Allows overriding the default or collection specified cloning method\n   * @return {ResultSet}\n   */\n  public map<U extends object>(mapFun: (obj: Doc<TData & TNested>, index: number, array: Doc<TData & TNested>[]) => U,\n                               dataOptions?: ResultSet.DataOptions): ResultSet<U> {\n    const data = this.data(dataOptions).map(mapFun);\n    //return return a new ResultSet with no filters\n    this._collection = new Collection(\"mappedData\");\n    this._collection.insert(data as any as TData);\n    this._filteredRows = [];\n    this._filterInitialized = false;\n    return this as any as ResultSet<U>;\n  }\n}\n\nexport namespace ResultSet {\n  export interface DataOptions {\n    forceClones?: boolean;\n    forceCloneMethod?: CloneMethod;\n    removeMeta?: boolean;\n  }\n\n  export interface SimpleSortOptions {\n    desc?: boolean;\n    disableIndexIntersect?: boolean;\n    forceIndexIntersect?: boolean;\n    useJavascriptSorting?: boolean;\n  }\n\n  export type ContainsHelperType<R> =\n    R extends string ? string | string[] :\n      R extends any[] ? R[number] | R[number][] :\n        R extends object ? keyof R | (keyof R)[] : never;\n\n  export type LokiOps<R> = {\n    $eq?: R;\n  } | {\n    $aeq?: R;\n  } | {\n    $ne?: R;\n  } | {\n    $dteq?: Date;\n  } | {\n    $gt?: R;\n  } | {\n    $gte?: R;\n  } | {\n    $lt?: R;\n  } | {\n    $lte?: R;\n  } | {\n    $between?: [R, R];\n  } | {\n    $in?: R[];\n  } | {\n    $nin?: R[];\n  } | {\n    $keyin?: object;\n  } | {\n    $nkeyin?: object;\n  } | {\n    $definedin?: object;\n  } | {\n    $undefinedin?: object;\n  } | {\n    $regex?: RegExp | string | [string, string] // string and [string, string] are better for serialization\n  } | {\n    $containsNone?: ContainsHelperType<R>;\n  } | {\n    $containsAny?: ContainsHelperType<R>;\n  } | {\n    $contains?: ContainsHelperType<R>;\n  } | {\n    $type?: string;\n  } | {\n    $finite?: boolean;\n  } | {\n    $size?: number;\n  } | {\n    $len?: number;\n  } | {\n    $where?: (val?: R) => boolean;\n  } | {\n    $jgt?: R;\n  } | {\n    $jgte?: R;\n  } | {\n    $jlt?: R;\n  } | {\n    $jlte?: R;\n  } | {\n    $jbetween?: [R, R];\n  };\n\n  export type Query<T> =\n    { [P in keyof T]?: LokiOps<T[P]> | T[P] }\n    & { $and?: Query<T>[] }\n    & { $or?: Query<T>[] }\n    & { $fts?: FullTextSearchQuery };\n}\n","import {LokiEventEmitter} from \"./event_emitter\";\nimport {ResultSet} from \"./result_set\";\nimport {Collection} from \"./collection\";\nimport {Doc} from \"../../common/types\";\nimport {Scorer} from \"../../full-text-search/src/scorer\";\n\n/**\n * DynamicView class is a versatile 'live' view class which can have filters and sorts applied.\n *    Collection.addDynamicView(name) instantiates this DynamicView object and notifies it\n *    whenever documents are add/updated/removed so it can remain up-to-date. (chainable)\n *\n * @example\n * let mydv = mycollection.addDynamicView('test');  // default is non-persistent\n * mydv.applyFind({ 'doors' : 4 });\n * mydv.applyWhere(function(obj) { return obj.name === 'Toyota'; });\n * let results = mydv.data();\n *\n * @extends LokiEventEmitter\n\n * @see {@link Collection#addDynamicView} to construct instances of DynamicView\n *\n * @param <TData> - the data type\n * @param <TNested> - nested properties of data type\n */\nexport class DynamicView<TData extends object = object, TNested extends object = object> extends LokiEventEmitter {\n\n  public readonly name: string;\n  private _collection: Collection<TData, TNested>;\n  private _persistent: boolean;\n  private _sortPriority: DynamicView.SortPriority;\n  private _minRebuildInterval: number;\n  private _rebuildPending: boolean = false;\n\n  private _resultSet: ResultSet<TData, TNested>;\n  private _resultData: Doc<TData & TNested>[] = [];\n  private _resultDirty: boolean = false;\n\n  private _cachedResultSet: ResultSet<TData, TNested> = null;\n\n  // keep ordered filter pipeline\n  private _filterPipeline: DynamicView.Filter<TData, TNested>[] = [];\n\n  // sorting member variables\n  // we only support one active search, applied using applySort() or applySimpleSort()\n  private _sortFunction: (lhs: Doc<TData & TNested>, rhs: Doc<TData & TNested>) => number = null;\n  private _sortCriteria: (keyof (TData & TNested) | [keyof (TData & TNested), boolean])[] = null;\n  private _sortCriteriaSimple: { field: keyof (TData & TNested), options: boolean | ResultSet.SimpleSortOptions } = null;\n  private _sortByScoring: boolean = null;\n  private _sortDirty: boolean = false;\n\n  /**\n   * Constructor.\n   * @param {Collection} collection - a reference to the collection to work agains\n   * @param {string} name - the name of this dynamic view\n   * @param {object} options - the options\n   * @param {boolean} [options.persistent=false] - indicates if view is to main internal results array in 'resultdata'\n   * @param {string} [options.sortPriority=\"passive\"] - the sort priority\n   * @param {number} [options.minRebuildInterval=1] - minimum rebuild interval (need clarification to docs here)\n   */\n  constructor(collection: Collection<TData, TNested>, name: string, options: DynamicView.Options = {}) {\n    super();\n    (\n      {\n        persistent: this._persistent = false,\n        // 'passive' will defer the sort phase until they call data(). (most efficient overall)\n        // 'active' will sort async whenever next idle. (prioritizes read speeds)\n        sortPriority: this._sortPriority = \"passive\",\n        minRebuildInterval: this._minRebuildInterval = 1\n      } = options\n    );\n\n    this._collection = collection;\n    this.name = name;\n    this._resultSet = new ResultSet(collection);\n\n    // for now just have 1 event for when we finally rebuilt lazy view\n    // once we refactor transactions, i will tie in certain transactional events\n    this._events = {\n      \"rebuild\": []\n    };\n  }\n\n  /**\n   * Internally used immediately after deserialization (loading)\n   *    This will clear out and reapply filterPipeline ops, recreating the view.\n   *    Since where filters do not persist correctly, this method allows\n   *    restoring the view to state where user can re-apply those where filters.\n   *\n   * @param removeWhereFilters\n   * @returns {DynamicView} This dynamic view for further chained ops.\n   * @fires DynamicView.rebuild\n   */\n  private _rematerialize({removeWhereFilters = false}): this {\n    this._resultData = [];\n    this._resultDirty = true;\n    this._resultSet = new ResultSet(this._collection);\n\n    if (this._sortFunction || this._sortCriteria || this._sortCriteriaSimple || this._sortByScoring !== null) {\n      this._sortDirty = true;\n    }\n\n    if (removeWhereFilters) {\n      // for each view see if it had any where filters applied... since they don't\n      // serialize those functions lets remove those invalid filters\n      let fpi = this._filterPipeline.length;\n      while (fpi--) {\n        if (this._filterPipeline[fpi].type === \"where\") {\n          if (fpi !== this._filterPipeline.length - 1) {\n            this._filterPipeline[fpi] = this._filterPipeline[this._filterPipeline.length - 1];\n          }\n          this._filterPipeline.length--;\n        }\n      }\n    }\n\n    // back up old filter pipeline, clear filter pipeline, and reapply pipeline ops\n    const ofp = this._filterPipeline;\n    this._filterPipeline = [];\n\n    // now re-apply 'find' filterPipeline ops\n    for (let idx = 0; idx < ofp.length; idx++) {\n      this.applyFind(ofp[idx].val);\n    }\n\n    // during creation of unit tests, i will remove this forced refresh and leave lazy\n    this.data();\n\n    // emit rebuild event in case user wants to be notified\n    this.emit(\"rebuild\", this);\n\n    return this;\n  }\n\n  /**\n   * Makes a copy of the internal ResultSet for branched queries.\n   * Unlike this dynamic view, the branched ResultSet will not be 'live' updated,\n   * so your branched query should be immediately resolved and not held for future evaluation.\n   * @param {(string|array=)} transform - Optional name of collection transform, or an array of transform steps\n   * @param {object} parameters - optional parameters (if optional transform requires them)\n   * @returns {ResultSet} A copy of the internal ResultSet for branched queries.\n   */\n  public branchResultSet(transform?: string | Collection.Transform<TData, TNested>[], parameters?: object): ResultSet<TData, TNested> {\n    const rs = this._resultSet.copy();\n    if (transform === undefined) {\n      return rs;\n    }\n    return rs.transform(transform, parameters);\n  }\n\n  /**\n   * Override of toJSON to avoid circular references.\n   */\n  public toJSON(): DynamicView.Serialized {\n    return {\n      name: this.name,\n      _persistent: this._persistent,\n      _sortPriority: this._sortPriority,\n      _minRebuildInterval: this._minRebuildInterval,\n      _resultSet: this._resultSet,\n      _filterPipeline: this._filterPipeline,\n      _sortCriteria: this._sortCriteria,\n      _sortCriteriaSimple: this._sortCriteriaSimple,\n      _sortByScoring: this._sortByScoring,\n      _sortDirty: this._sortDirty,\n    };\n  }\n\n  public static fromJSONObject(collection: Collection, obj: DynamicView.Serialized): DynamicView {\n    let dv = new DynamicView(collection, obj.name);\n    dv._resultDirty = true;\n    dv._filterPipeline = obj._filterPipeline;\n    dv._resultData = [];\n    dv._sortCriteria = obj._sortCriteria as any;\n    dv._sortCriteriaSimple = obj._sortCriteriaSimple as any;\n    dv._sortByScoring = obj._sortByScoring;\n    dv._sortDirty = obj._sortDirty;\n    dv._resultSet._filteredRows = obj._resultSet._filteredRows;\n    dv._resultSet._filterInitialized = obj._resultSet._filterInitialized;\n    dv._rematerialize({\n      removeWhereFilters: true\n    });\n    return dv;\n  }\n\n  /**\n   * Used to clear pipeline and reset dynamic view to initial state.\n   * Existing options should be retained.\n   * @param {boolean} queueSortPhase - (default: false) if true we will async rebuild view (maybe set default to true in future?)\n   */\n  public removeFilters({queueSortPhase = false} = {}): void {\n    this._rebuildPending = false;\n    this._resultSet.reset();\n    this._resultData = [];\n    this._resultDirty = true;\n\n    this._cachedResultSet = null;\n\n    // keep ordered filter pipeline\n    this._filterPipeline = [];\n\n    // sorting member variables\n    // we only support one active search, applied using applySort() or applySimpleSort()\n    this._sortFunction = null;\n    this._sortCriteria = null;\n    this._sortCriteriaSimple = null;\n    this._sortByScoring = null;\n    this._sortDirty = false;\n\n    if (queueSortPhase === true) {\n      this._queueSortPhase();\n    }\n  }\n\n  /**\n   * Used to apply a sort to the dynamic view\n   * @example\n   * dv.applySort(function(obj1, obj2) {\n\t *   if (obj1.name === obj2.name) return 0;\n\t *   if (obj1.name > obj2.name) return 1;\n\t *   if (obj1.name < obj2.name) return -1;\n\t * });\n   * @param {function} comparefun - a javascript compare function used for sorting\n   * @returns {DynamicView} this DynamicView object, for further chain ops.\n   */\n  public applySort(comparefun: (lhs: Doc<TData & TNested>, rhs: Doc<TData & TNested>) => number): this {\n    this._sortFunction = comparefun;\n    this._sortCriteria = null;\n    this._sortCriteriaSimple = null;\n    this._sortByScoring = null;\n    this._queueSortPhase();\n    return this;\n  }\n\n  /**\n   * Used to specify a property used for view translation.\n   * @param {string} field - the field name\n   * @param {boolean|object=} options - boolean for sort descending or options object\n   * @param {boolean} [options.desc=false] - whether we should sort descending.\n   * @param {boolean} [options.disableIndexIntersect=false] - whether we should explicity not use array intersection.\n   * @param {boolean} [options.forceIndexIntersect=false] - force array intersection (if binary index exists).\n   * @param {boolean} [options.useJavascriptSorting=false] - whether results are sorted via basic javascript sort.\n   * @returns {DynamicView} this DynamicView object, for further chain ops.\n   * @example\n   * dv.applySimpleSort(\"name\");\n   */\n  public applySimpleSort(field: keyof (TData & TNested), options: boolean | ResultSet.SimpleSortOptions = false): this {\n    this._sortCriteriaSimple = {field, options};\n    this._sortFunction = null;\n    this._sortCriteria = null;\n    this._sortByScoring = null;\n    this._queueSortPhase();\n    return this;\n  }\n\n  /**\n   * Allows sorting a ResultSet based on multiple columns.\n   * @param {Array} criteria - array of property names or subarray of [propertyname, isdesc] used evaluate sort order\n   * @returns {DynamicView} Reference to this DynamicView, sorted, for future chain operations.\n   * @example\n   * // to sort by age and then name (both ascending)\n   * dv.applySortCriteria(['age', 'name']);\n   * // to sort by age (ascending) and then by name (descending)\n   * dv.applySortCriteria(['age', ['name', true]]);\n   * // to sort by age (descending) and then by name (descending)\n   * dv.applySortCriteria([['age', true], ['name', true]]);\n   */\n  public applySortCriteria(criteria: (keyof (TData & TNested) | [keyof (TData & TNested), boolean])[]): this {\n    this._sortCriteria = criteria;\n    this._sortCriteriaSimple = null;\n    this._sortFunction = null;\n    this._sortByScoring = null;\n    this._queueSortPhase();\n    return this;\n  }\n\n  /**\n   * Used to apply a sort by the latest full-text-search scoring.\n   * @param {boolean} [ascending=false] - sort ascending\n   */\n  public applySortByScoring(ascending = false): this {\n    this._sortFunction = null;\n    this._sortCriteria = null;\n    this._sortCriteriaSimple = null;\n    this._sortByScoring = ascending;\n    this._queueSortPhase();\n    return this;\n  }\n\n  /**\n   * Returns the scoring of the last full-text-search.\n   * @returns {ScoreResult[]}\n   */\n  public getScoring(): Scorer.ScoreResult[] {\n    return this._resultSet.getScoring();\n  }\n\n  /**\n   * Marks the beginning of a transaction.\n   * @returns {DynamicView} this DynamicView object, for further chain ops.\n   */\n  public startTransaction(): this {\n    this._cachedResultSet = this._resultSet.copy();\n    return this;\n  }\n\n  /**\n   * Commits a transaction.\n   * @returns {DynamicView} this DynamicView object, for further chain ops.\n   */\n  public commit(): this {\n    this._cachedResultSet = null;\n    return this;\n  }\n\n  /**\n   * Rolls back a transaction.\n   * @returns {DynamicView} this DynamicView object, for further chain ops.\n   */\n  public rollback(): this {\n    this._resultSet = this._cachedResultSet;\n\n    if (this._persistent) {\n      // for now just rebuild the persistent dynamic view data in this worst case scenario\n      // (a persistent view utilizing transactions which get rolled back), we already know the filter so not too bad.\n      this._resultData = this._resultSet.data();\n\n      this.emit(\"rebuild\", this);\n    }\n    return this;\n  }\n\n  /**\n   * Find the index of a filter in the pipeline, by that filter's ID.\n   * @param {(string|number)} uid - The unique ID of the filter.\n   * @returns {number}: index of the referenced filter in the pipeline; -1 if not found.\n   */\n  private _indexOfFilterWithId(uid: string | number): number {\n    if (typeof uid === \"string\" || typeof uid === \"number\") {\n      for (let idx = 0, len = this._filterPipeline.length; idx < len; idx++) {\n        if (uid === this._filterPipeline[idx].uid) {\n          return idx;\n        }\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Add the filter object to the end of view's filter pipeline and apply the filter to the ResultSet.\n   * @param {object} filter - The filter object. Refer to applyFilter() for extra details.\n   */\n  private _addFilter(filter: DynamicView.Filter<TData, TNested>): void {\n    this._filterPipeline.push(filter);\n    this._resultSet[filter.type as string](filter.val);\n  }\n\n  /**\n   * Reapply all the filters in the current pipeline.\n   *\n   * @returns {DynamicView} this DynamicView object, for further chain ops.\n   */\n  public reapplyFilters(): this {\n    this._resultSet.reset();\n\n    this._cachedResultSet = null;\n    if (this._persistent) {\n      this._resultData = [];\n      this._resultDirty = true;\n    }\n\n    const filters = this._filterPipeline;\n    this._filterPipeline = [];\n\n    for (let idx = 0, len = filters.length; idx < len; idx++) {\n      this._addFilter(filters[idx]);\n    }\n\n    if (this._sortFunction || this._sortCriteria || this._sortCriteriaSimple || this._sortByScoring !== null) {\n      this._queueSortPhase();\n    } else {\n      this._queueRebuildEvent();\n    }\n\n    return this;\n  }\n\n  /**\n   * Adds or updates a filter in the DynamicView filter pipeline\n   * @param {object} filter - A filter object to add to the pipeline.\n   *    The object is in the format { 'type': filter_type, 'val', filter_param, 'uid', optional_filter_id }\n   * @returns {DynamicView} this DynamicView object, for further chain ops.\n   */\n  public applyFilter(filter: DynamicView.Filter<TData, TNested>): this {\n    const idx = this._indexOfFilterWithId(filter.uid);\n    if (idx >= 0) {\n      this._filterPipeline[idx] = filter;\n      return this.reapplyFilters();\n    }\n\n    this._cachedResultSet = null;\n    if (this._persistent) {\n      this._resultData = [];\n      this._resultDirty = true;\n    }\n\n    this._addFilter(filter);\n\n    if (this._sortFunction || this._sortCriteria || this._sortCriteriaSimple || this._sortByScoring !== null) {\n      this._queueSortPhase();\n    } else {\n      this._queueRebuildEvent();\n    }\n    return this;\n  }\n\n  /**\n   * applyFind() - Adds or updates a mongo-style query option in the DynamicView filter pipeline\n   *\n   * @param {object} query - A mongo-style query object to apply to pipeline\n   * @param {(string|number)} uid - Optional: The unique ID of this filter, to reference it in the future.\n   * @returns {DynamicView} this DynamicView object, for further chain ops.\n   */\n  public applyFind(query: object, uid: string | number = \"\"): this {\n    this.applyFilter({\n      type: \"find\",\n      val: query,\n      uid\n    });\n    return this;\n  }\n\n  /**\n   * Adds or updates a javascript filter function in the DynamicView filter pipeline\n   * @param {function} fun - A javascript filter function to apply to pipeline\n   * @param {(string|number)} uid - Optional: The unique ID of this filter, to reference it in the future.\n   * @returns {DynamicView} this DynamicView object, for further chain ops.\n   */\n  public applyWhere(fun: (obj: Doc<TData & TNested>) => boolean, uid?: string | number): this {\n    this.applyFilter({\n      type: \"where\",\n      val: fun,\n      uid\n    });\n    return this;\n  }\n\n  /**\n   * Remove the specified filter from the DynamicView filter pipeline\n   * @param {(string|number)} uid - The unique ID of the filter to be removed.\n   * @returns {DynamicView} this DynamicView object, for further chain ops.\n   */\n  public removeFilter(uid: string | number): this {\n    const idx = this._indexOfFilterWithId(uid);\n    if (idx < 0) {\n      throw new Error(\"Dynamic view does not contain a filter with ID: \" + uid);\n    }\n\n    this._filterPipeline.splice(idx, 1);\n    this.reapplyFilters();\n    return this;\n  }\n\n  /**\n   * Returns the number of documents representing the current DynamicView contents.\n   * @returns {number} The number of documents representing the current DynamicView contents.\n   */\n  public count(): number {\n    // in order to be accurate we will pay the minimum cost (and not alter dv state management)\n    // recurring ResultSet data resolutions should know internally its already up to date.\n    // for persistent data this will not update resultdata nor fire rebuild event.\n    if (this._resultDirty) {\n      this._resultData = this._resultSet.data();\n    }\n\n    return this._resultSet.count();\n  }\n\n  /**\n   * Resolves and pending filtering and sorting, then returns document array as result.\n   * @param {object} options - optional parameters to pass to ResultSet.data() if non-persistent\n   * @param {boolean} [options.forceClones] - Allows forcing the return of cloned objects even when\n   *        the collection is not configured for clone object.\n   * @param {string} [options.forceCloneMethod] - Allows overriding the default or collection specified cloning method.\n   *        Possible values include 'parse-stringify', 'jquery-extend-deep', 'shallow', 'shallow-assign'\n   * @param {boolean} [options.removeMeta] - will force clones and strip $loki and meta properties from documents\n   *\n   * @returns {Array} An array of documents representing the current DynamicView contents.\n   */\n  public data(options: ResultSet.DataOptions = {}): Doc<TData & TNested>[] {\n    // using final sort phase as 'catch all' for a few use cases which require full rebuild\n    if (this._sortDirty || this._resultDirty) {\n      this._performSortPhase({\n        suppressRebuildEvent: true\n      });\n    }\n    return (this._persistent) ? (this._resultData) : (this._resultSet.data(options));\n  }\n\n  /**\n   * When the view is not sorted we may still wish to be notified of rebuild events.\n   * This event will throttle and queue a single rebuild event when batches of updates affect the view.\n   */\n  private _queueRebuildEvent(): void {\n    if (this._rebuildPending) {\n      return;\n    }\n    this._rebuildPending = true;\n\n    setTimeout(() => {\n      if (this._rebuildPending) {\n        this._rebuildPending = false;\n        this.emit(\"rebuild\", this);\n      }\n    }, this._minRebuildInterval);\n  }\n\n  /**\n   * If the view is sorted we will throttle sorting to either :\n   * (1) passive - when the user calls data(), or\n   * (2) active - once they stop updating and yield js thread control\n   */\n  private _queueSortPhase(): void {\n    // already queued? exit without queuing again\n    if (this._sortDirty) {\n      return;\n    }\n    this._sortDirty = true;\n\n    if (this._sortPriority === \"active\") {\n      // active sorting... once they are done and yield js thread, run async performSortPhase()\n      setTimeout(() => {\n        this._performSortPhase();\n      }, this._minRebuildInterval);\n    } else {\n      // must be passive sorting... since not calling performSortPhase (until data call), lets use queueRebuildEvent to\n      // potentially notify user that data has changed.\n      this._queueRebuildEvent();\n    }\n  }\n\n  /**\n   * Invoked synchronously or asynchronously to perform final sort phase (if needed)\n   */\n  private _performSortPhase(options: { suppressRebuildEvent?: boolean } = {}): void {\n    // async call to this may have been pre-empted by synchronous call to data before async could fire\n    if (!this._sortDirty && !this._resultDirty) {\n      return;\n    }\n\n    if (this._sortDirty) {\n      if (this._sortFunction) {\n        this._resultSet.sort(this._sortFunction);\n      } else if (this._sortCriteria) {\n        this._resultSet.compoundsort(this._sortCriteria);\n      } else if (this._sortCriteriaSimple) {\n        this._resultSet.simplesort(this._sortCriteriaSimple.field, this._sortCriteriaSimple.options);\n      } else if (this._sortByScoring !== null) {\n        this._resultSet.sortByScoring(this._sortByScoring);\n      }\n\n      this._sortDirty = false;\n    }\n\n    if (this._persistent) {\n      // persistent view, rebuild local resultdata array\n      this._resultData = this._resultSet.data();\n      this._resultDirty = false;\n    }\n\n    if (!options.suppressRebuildEvent) {\n      this.emit(\"rebuild\", this);\n    }\n  }\n\n  /**\n   * (Re)evaluating document inclusion.\n   * Called by : collection.insert() and collection.update().\n   * @param {int} objIndex - index of document to (re)run through filter pipeline.\n   * @param {boolean} isNew - true if the document was just added to the collection.\n   * @hidden\n   */\n  _evaluateDocument(objIndex: number, isNew: boolean): void {\n    // if no filter applied yet, the result 'set' should remain 'everything'\n    if (!this._resultSet._filterInitialized) {\n      if (this._persistent) {\n        this._resultData = this._resultSet.data();\n      }\n      // need to re-sort to sort new document\n      if (this._sortFunction || this._sortCriteria || this._sortCriteriaSimple) {\n        this._queueSortPhase();\n      } else {\n        this._queueRebuildEvent();\n      }\n      return;\n    }\n\n    const ofr = this._resultSet._filteredRows;\n    const oldPos = (isNew) ? (-1) : (ofr.indexOf(+objIndex));\n    const oldlen = ofr.length;\n\n    // creating a 1-element ResultSet to run filter chain ops on to see if that doc passes filters;\n    // mostly efficient algorithm, slight stack overhead price (this function is called on inserts and updates)\n    const evalResultSet = new ResultSet(this._collection);\n    evalResultSet._filteredRows = [objIndex];\n    evalResultSet._filterInitialized = true;\n    let filter;\n    for (let idx = 0, len = this._filterPipeline.length; idx < len; idx++) {\n      filter = this._filterPipeline[idx];\n      evalResultSet[filter.type as string](filter.val);\n    }\n\n    // not a true position, but -1 if not pass our filter(s), 0 if passed filter(s)\n    const newPos = (evalResultSet._filteredRows.length === 0) ? -1 : 0;\n\n    // wasn't in old, shouldn't be now... do nothing\n    if (oldPos === -1 && newPos === -1) return;\n\n    // wasn't in ResultSet, should be now... add\n    if (oldPos === -1 && newPos !== -1) {\n      ofr.push(objIndex);\n\n      if (this._persistent) {\n        this._resultData.push(this._collection._data[objIndex]);\n      }\n\n      // need to re-sort to sort new document\n      if (this._sortFunction || this._sortCriteria || this._sortCriteriaSimple) {\n        this._queueSortPhase();\n      } else {\n        this._queueRebuildEvent();\n      }\n\n      return;\n    }\n\n    // was in ResultSet, shouldn't be now... delete\n    if (oldPos !== -1 && newPos === -1) {\n      if (oldPos < oldlen - 1) {\n        ofr.splice(oldPos, 1);\n\n        if (this._persistent) {\n          this._resultData.splice(oldPos, 1);\n        }\n      } else {\n        ofr.length = oldlen - 1;\n\n        if (this._persistent) {\n          this._resultData.length = oldlen - 1;\n        }\n      }\n\n      // in case changes to data altered a sort column\n      if (this._sortFunction || this._sortCriteria || this._sortCriteriaSimple) {\n        this._queueSortPhase();\n      } else {\n        this._queueRebuildEvent();\n      }\n      return;\n    }\n\n    // was in ResultSet, should still be now... (update persistent only?)\n    if (oldPos !== -1 && newPos !== -1) {\n      if (this._persistent) {\n        // in case document changed, replace persistent view data with the latest collection._data document\n        this._resultData[oldPos] = this._collection._data[objIndex];\n      }\n\n      // in case changes to data altered a sort column\n      if (this._sortFunction || this._sortCriteria || this._sortCriteriaSimple) {\n        this._queueSortPhase();\n      } else {\n        this._queueRebuildEvent();\n      }\n    }\n  }\n\n  /**\n   * Internal function called on collection.delete().\n   * @hidden\n   */\n  _removeDocument(objIndex: number): void {\n    // if no filter applied yet, the result 'set' should remain 'everything'\n    if (!this._resultSet._filterInitialized) {\n      if (this._persistent) {\n        this._resultData = this._resultSet.data();\n      }\n      // in case changes to data altered a sort column\n      if (this._sortFunction || this._sortCriteria || this._sortCriteriaSimple) {\n        this._queueSortPhase();\n      } else {\n        this._queueRebuildEvent();\n      }\n      return;\n    }\n\n    const ofr = this._resultSet._filteredRows;\n    const oldPos = ofr.indexOf(+objIndex);\n    let oldlen = ofr.length;\n    if (oldPos !== -1) {\n      // if not last row in resultdata, swap last to hole and truncate last row\n      if (oldPos < oldlen - 1) {\n        ofr[oldPos] = ofr[oldlen - 1];\n        ofr.length = oldlen - 1;\n\n        if (this._persistent) {\n          this._resultData[oldPos] = this._resultData[oldlen - 1];\n          this._resultData.length = oldlen - 1;\n        }\n      }\n      // last row, so just truncate last row\n      else {\n        ofr.length = oldlen - 1;\n\n        if (this._persistent) {\n          this._resultData.length = oldlen - 1;\n        }\n      }\n\n      // in case changes to data altered a sort column\n      if (this._sortFunction || this._sortCriteria || this._sortCriteriaSimple) {\n        this._queueSortPhase();\n      } else {\n        this._queueRebuildEvent();\n      }\n    }\n\n    // since we are using filteredRows to store data array positions\n    // if they remove a document (whether in our view or not),\n    // we need to adjust array positions -1 for all document array references after that position\n    oldlen = ofr.length;\n    for (let idx = 0; idx < oldlen; idx++) {\n      if (ofr[idx] > objIndex) {\n        ofr[idx]--;\n      }\n    }\n  }\n\n  /**\n   * Data transformation via user supplied functions\n   * @param {function} mapFunction - this function accepts a single document for you to transform and return\n   * @param {function} reduceFunction - this function accepts many (array of map outputs) and returns single value\n   * @returns The output of your reduceFunction\n   */\n  public mapReduce<T, U>(mapFunction: (item: TData, index: number, array: TData[]) => T, reduceFunction: (array: T[]) => U): U {\n    try {\n      return reduceFunction(this.data().map(mapFunction));\n    } catch (err) {\n      throw err;\n    }\n  }\n}\n\nexport namespace DynamicView {\n  export interface Options {\n    persistent?: boolean;\n    sortPriority?: SortPriority;\n    minRebuildInterval?: number;\n  }\n\n  export type SortPriority = \"passive\" | \"active\";\n\n  export interface Serialized {\n    name: string;\n    _persistent: boolean;\n    _sortPriority: SortPriority;\n    _minRebuildInterval: number;\n    _resultSet: ResultSet<any>;\n    _filterPipeline: Filter<any>[];\n    _sortCriteria: (string | [string, boolean])[];\n    _sortCriteriaSimple: { field: string, options: boolean | ResultSet.SimpleSortOptions };\n    _sortByScoring: boolean;\n    _sortDirty: boolean;\n  }\n\n  export type Filter<TData extends object = object, TNested extends object = object> = {\n    type: \"find\";\n    val: ResultSet.Query<Doc<TData & TNested>>;\n    uid: number | string;\n  } | {\n    type: \"where\";\n    val: (obj: Doc<TData & TNested>) => boolean;\n    uid: number | string;\n  };\n}\n","import {LokiEventEmitter} from \"./event_emitter\";\nimport {UniqueIndex} from \"./unique_index\";\nimport {ResultSet, LokiOps} from \"./result_set\";\nimport {DynamicView} from \"./dynamic_view\";\nimport {ltHelper, gtHelper, aeqHelper} from \"./helper\";\nimport {clone, CloneMethod} from \"./clone\";\nimport {Doc, Dict} from \"../../common/types\";\nimport {FullTextSearch} from \"../../full-text-search/src/full_text_search\";\nimport {PLUGINS} from \"../../common/plugin\";\nimport {Analyzer} from \"../../full-text-search/src/analyzer/analyzer\";\n\nexport {CloneMethod} from \"./clone\";\n\nfunction average(array: number[]): number {\n  return (array.reduce((a, b) => a + b, 0)) / array.length;\n}\n\nfunction standardDeviation(values: number[]): number {\n  const avg = average(values);\n  const squareDiffs = values.map((value) => {\n    const diff = value - avg;\n    return diff * diff;\n  });\n\n  const avgSquareDiff = average(squareDiffs);\n  return Math.sqrt(avgSquareDiff);\n}\n\n/**\n * Returns an array with the value of a nested property of an object.\n * Returns an array of values if the nested property is across child arrays.\n * @param {object} obj - the object\n * @param {string[]} path - the path of the nested property\n * @param {any[]} array - the result array\n * @param {number} pathIdx - the current path idx\n * @returns {boolean} true if nested property is across child arrays, otherwise false\n */\nfunction getNestedPropertyValue(obj: object, path: string[], array: any[], pathIdx: number = 0): boolean {\n  if (obj === undefined) {\n    return false;\n  }\n\n  if (pathIdx + 1 === path.length) {\n    array.push(obj[path[pathIdx]]);\n    return false;\n  }\n\n  const curr = obj[path[pathIdx]];\n  if (Array.isArray(curr)) {\n    for (let i = 0; i < curr.length; i++) {\n      getNestedPropertyValue(curr[i], path, array, pathIdx + 1);\n    }\n    return true;\n  } else {\n    return getNestedPropertyValue(curr, path, array, pathIdx + 1);\n  }\n}\n\n/**\n * Collection class that handles documents of same type\n * @extends LokiEventEmitter\n * @param <TData> - the data type\n * @param <TNested> - nested properties of data type\n */\nexport class Collection<TData extends object = object, TNested extends object = object> extends LokiEventEmitter {\n  // the name of the collection\n  public name: string;\n  // the data held by the collection\n  public _data: Doc<TData & TNested>[] = [];\n  // index of id\n  private _idIndex: number[] = [];\n  // user defined indexes\n  public _binaryIndices: { [P in keyof (TData & TNested)]?: Collection.BinaryIndex } = {}; // user defined indexes\n\n  /**\n   * Unique constraints contain duplicate object references, so they are not persisted.\n   * We will keep track of properties which have unique constraints applied here, and regenerate on load.\n   */\n  public _constraints: {\n    unique: {\n      [P in keyof (TData & TNested)]?: UniqueIndex<TData & TNested>;\n    }\n  } = {unique: {}};\n\n  /**\n   * Transforms will be used to store frequently used query chains as a series of steps which itself can be stored along\n   * with the database.\n   */\n  public _transforms: Dict<Collection.Transform<TData, TNested>[]> = {};\n\n  /**\n   * In autosave scenarios we will use collection level dirty flags to determine whether save is needed.\n   * currently, if any collection is dirty we will autosave the whole database if autosave is configured.\n   * Defaulting to true since this is called from addCollection and adding a collection should trigger save.\n   */\n  public _dirty: boolean = true;\n\n  // private holder for cached data\n  private _cached: {\n    index: number[];\n    data: Doc<TData & TNested>[];\n    binaryIndex: { [P in keyof (TData & TNested)]?: Collection.BinaryIndex };\n  } = null;\n\n  /**\n   * If set to true we will optimally keep indices 'fresh' during insert/update/remove ops (never dirty/never needs rebuild).\n   * If you frequently intersperse insert/update/remove ops between find ops this will likely be significantly faster option.\n   */\n  public _adaptiveBinaryIndices: boolean;\n\n  /**\n   * Is collection transactional.\n   */\n  private _transactional: boolean;\n\n  /**\n   * Options to clone objects when inserting them.\n   */\n  public _cloneObjects: boolean;\n\n  /**\n   * Default clone method (if enabled) is parse-stringify.\n   */\n  public _cloneMethod: CloneMethod;\n\n  /**\n   * If set to true we will not maintain a meta property for a document.\n   */\n  private _disableMeta: boolean;\n\n  /**\n   * Disable track changes.\n   */\n  private _disableChangesApi: boolean;\n\n  /**\n   * Disable delta update object style on changes.\n   */\n  public _disableDeltaChangesApi: boolean;\n\n  /**\n   * By default, if you insert a document into a collection with binary indices, if those indexed properties contain\n   * a DateTime we will convert to epoch time format so that (across serializations) its value position will be the\n   * same 'after' serialization as it was 'before'.\n   */\n  private _serializableIndices: boolean;\n\n  /**\n   * Name of path of used nested properties.\n   */\n  private _nestedProperties: { name: keyof TNested, path: string[] }[] = [];\n\n  /**\n   * Option to activate a cleaner daemon - clears \"aged\" documents at set intervals.\n   */\n  public _ttl: Collection.TTL = {\n    age: null,\n    ttlInterval: null,\n    daemon: null\n  };\n\n  // currentMaxId - change manually at your own peril!\n  private _maxId: number = 0;\n  private _dynamicViews: DynamicView<TData, TNested>[] = [];\n\n  /**\n   * Changes are tracked by collection and aggregated by the db.\n   */\n  private _changes: Collection.Change[] = [];\n\n  /**\n   * stages: a map of uniquely identified 'stages', which hold copies of objects to be\n   * manipulated without affecting the data in the original collection\n   */\n  private _stages: object = {};\n  private _commitLog: { timestamp: number; message: string; data: any }[] = [];\n\n  public _fullTextSearch: FullTextSearch;\n\n  /**\n   * @param {string} name - collection name\n   * @param {(object)} [options={}] - a configuration object\n   * @param {string[]} [options.unique=[]] - array of property names to define unique constraints for\n   * @param {string[]} [options.exact=[]] - array of property names to define exact constraints for\n   * @param {string[]} [options.indices=[]] - array property names to define binary indexes for\n   * @param {boolean} [options.adaptiveBinaryIndices=true] - collection indices will be actively rebuilt rather than lazily\n   * @param {boolean} [options.asyncListeners=false] - whether listeners are invoked asynchronously\n   * @param {boolean} [options.disableMeta=false] - set to true to disable meta property on documents\n   * @param {boolean} [options.disableChangesApi=true] - set to false to enable Changes API\n   * @param {boolean} [options.disableDeltaChangesApi=true] - set to false to enable Delta Changes API (requires Changes API, forces cloning)\n   * @param {boolean} [options.clone=false] - specify whether inserts and queries clone to/from user\n   * @param {boolean} [options.serializableIndices =true] - converts date values on binary indexed property values are serializable\n   * @param {string} [options.cloneMethod=\"deep\"] - the clone method\n   * @param {number} [options.transactional=false] - ?\n   * @param {number} [options.ttl=] - age of document (in ms.) before document is considered aged/stale.\n   * @param {number} [options.ttlInterval=] - time interval for clearing out 'aged' documents; not set by default\n   * @param {FullTextSearch.FieldOptions} [options.fullTextSearch=] - the full-text search options\n   * @see {@link Loki#addCollection} for normal creation of collections\n   */\n  constructor(name: string, options: Collection.Options<TData, TNested> = {}) {\n    super();\n\n    // Consistency checks.\n    if (options && options.disableMeta === true) {\n      if (options.disableChangesApi === false) {\n        throw new Error(\"disableMeta option cannot be passed as true when disableChangesApi is passed as false\");\n      }\n      if (options.disableDeltaChangesApi === false) {\n        throw new Error(\"disableMeta option cannot be passed as true when disableDeltaChangesApi is passed as false\");\n      }\n      if (typeof options.ttl === \"number\" && options.ttl > 0) {\n        throw new Error(\"disableMeta option cannot be passed as true when ttl is enabled\");\n      }\n    }\n\n    // the name of the collection\n    this.name = name;\n\n    /* OPTIONS */\n    // exact match and unique constraints\n    if (options.unique !== undefined) {\n      if (!Array.isArray(options.unique)) {\n        options.unique = [options.unique];\n      }\n      options.unique.forEach((prop: keyof (TData & TNested)) => {\n        this._constraints.unique[prop] = new UniqueIndex<TData & TNested>(prop);\n      });\n    }\n\n    // Full text search\n    if (PLUGINS[\"FullTextSearch\"] !== undefined) {\n      this._fullTextSearch = options.fullTextSearch !== undefined\n        ? new (PLUGINS[\"FullTextSearch\"])(options.fullTextSearch) : null;\n    } else {\n      this._fullTextSearch = null;\n    }\n\n    // .\n    this._adaptiveBinaryIndices = options.adaptiveBinaryIndices !== undefined ? options.adaptiveBinaryIndices : true;\n\n    // .\n    this._transactional = options.transactional !== undefined ? options.transactional : false;\n\n    // .\n    this._cloneObjects = options.clone !== undefined ? options.clone : false;\n\n    // .\n    this._asyncListeners = options.asyncListeners !== undefined ? options.asyncListeners : false;\n\n    // .\n    this._disableMeta = options.disableMeta !== undefined ? options.disableMeta : false;\n\n    // .\n    this._disableChangesApi = options.disableChangesApi !== undefined ? options.disableChangesApi : true;\n\n    // .\n    this._disableDeltaChangesApi = options.disableDeltaChangesApi !== undefined ? options.disableDeltaChangesApi : true;\n\n    // .\n    this._cloneMethod = options.cloneMethod !== undefined ? options.cloneMethod : \"deep\";\n    if (this._disableChangesApi) {\n      this._disableDeltaChangesApi = true;\n    }\n\n    // .\n    this._serializableIndices = options.serializableIndices !== undefined ? options.serializableIndices : true;\n\n    // .\n    if (options.nestedProperties != undefined) {\n      for (let i = 0; i < options.nestedProperties.length; i++) {\n        const nestedProperty = options.nestedProperties[i];\n        if (typeof nestedProperty === \"string\") {\n          this._nestedProperties.push({name: nestedProperty, path: nestedProperty.split(\".\")});\n        } else {\n          this._nestedProperties.push(nestedProperty as { name: keyof TNested, path: string[] });\n        }\n      }\n    }\n\n    this.setTTL(options.ttl || -1, options.ttlInterval);\n\n    // events\n    this._events = {\n      \"insert\": [],\n      \"update\": [],\n      \"pre-insert\": [],\n      \"pre-update\": [],\n      \"close\": [],\n      \"flushbuffer\": [],\n      \"error\": [],\n      \"delete\": [],\n      \"warning\": []\n    };\n\n    // initialize the id index\n    this._ensureId();\n    let indices = options.indices ? options.indices : [];\n    for (let idx = 0; idx < indices.length; idx++) {\n      this.ensureIndex(options.indices[idx]);\n    }\n\n    this.setChangesApi(this._disableChangesApi, this._disableDeltaChangesApi);\n\n    // for de-serialization purposes\n    this.flushChanges();\n  }\n\n  toJSON(): Collection.Serialized {\n    return {\n      name: this.name,\n      _dynamicViews: this._dynamicViews,\n      uniqueNames: Object.keys(this._constraints.unique),\n      transforms: this._transforms as any,\n      binaryIndices: this._binaryIndices as any,\n      _data: this._data,\n      idIndex: this._idIndex,\n      maxId: this._maxId,\n      _dirty: this._dirty,\n      _nestedProperties: this._nestedProperties,\n      adaptiveBinaryIndices: this._adaptiveBinaryIndices,\n      transactional: this._transactional,\n      asyncListeners: this._asyncListeners,\n      disableMeta: this._disableMeta,\n      disableChangesApi: this._disableChangesApi,\n      disableDeltaChangesApi: this._disableDeltaChangesApi,\n      cloneObjects: this._cloneObjects,\n      cloneMethod: this._cloneMethod,\n      changes: this._changes,\n      _fullTextSearch: this._fullTextSearch\n    };\n  }\n\n  static fromJSONObject(obj: Collection.Serialized, options?: Collection.DeserializeOptions) {\n    let coll = new Collection<any>(obj.name, {\n      disableChangesApi: obj.disableChangesApi,\n      disableDeltaChangesApi: obj.disableDeltaChangesApi\n    });\n\n    coll._adaptiveBinaryIndices = obj.adaptiveBinaryIndices !== undefined ? (obj.adaptiveBinaryIndices === true) : false;\n    coll._transactional = obj.transactional;\n    coll._asyncListeners = obj.asyncListeners;\n    coll._disableMeta = obj.disableMeta;\n    coll._disableChangesApi = obj.disableChangesApi;\n    coll._cloneObjects = obj.cloneObjects;\n    coll._cloneMethod = obj.cloneMethod || \"deep\";\n    coll._changes = obj.changes;\n    coll._nestedProperties = obj._nestedProperties as any[];\n\n    coll._dirty = (options && options.retainDirtyFlags === true) ? obj._dirty : false;\n\n    function makeLoader(coll: Collection.Serialized) {\n      const collOptions = options[coll.name];\n\n      if (collOptions.proto) {\n        const inflater = collOptions.inflate || ((src: Doc<any>, dest: Doc<any>) => {\n          for (let prop in src) {\n            dest[prop] = src[prop];\n          }\n        });\n\n        return (data: Doc<any>) => {\n          const collObj = new (collOptions.proto)();\n          inflater(data, collObj);\n          return collObj;\n        };\n      }\n\n      return collOptions.inflate;\n    }\n\n    // load each element individually\n    if (options && options[obj.name] !== undefined) {\n      let loader = makeLoader(obj);\n\n      for (let j = 0; j < obj._data.length; j++) {\n        coll._data[j] = coll._defineNestedProperties(loader(obj._data[j]));\n      }\n    } else {\n      for (let j = 0; j < obj._data.length; j++) {\n        coll._data[j] = coll._defineNestedProperties(obj._data[j]);\n      }\n    }\n\n    coll._maxId = (obj.maxId === undefined) ? 0 : obj.maxId;\n    coll._idIndex = obj.idIndex;\n    if (obj.binaryIndices !== undefined) {\n      coll._binaryIndices = obj.binaryIndices;\n    }\n    if (obj.transforms !== undefined) {\n      coll._transforms = obj.transforms;\n    }\n\n    coll._ensureId();\n\n    // regenerate unique indexes\n    if (obj.uniqueNames !== undefined) {\n      for (let j = 0; j < obj.uniqueNames.length; j++) {\n        coll.ensureUniqueIndex(obj.uniqueNames[j]);\n      }\n    }\n\n    // in case they are loading a database created before we added dynamic views, handle undefined\n    if (obj._dynamicViews !== undefined) {\n      // reinflate DynamicViews and attached ResultSets\n      for (let idx = 0; idx < obj._dynamicViews.length; idx++) {\n        coll._dynamicViews.push(DynamicView.fromJSONObject(coll, obj._dynamicViews[idx] as any));\n      }\n    }\n\n    if (obj._fullTextSearch) {\n      coll._fullTextSearch = PLUGINS[\"FullTextSearch\"].fromJSONObject(obj._fullTextSearch, options.fullTextSearch);\n    }\n\n    return coll;\n  }\n\n  /**\n   * Adds a named collection transform to the collection\n   * @param {string} name - name to associate with transform\n   * @param {array} transform - an array of transformation 'step' objects to save into the collection\n   */\n  public addTransform(name: string, transform: Collection.Transform<TData, TNested>[]): void {\n    if (this._transforms[name] !== undefined) {\n      throw new Error(\"a transform by that name already exists\");\n    }\n    this._transforms[name] = transform;\n  }\n\n  /**\n   * Retrieves a named transform from the collection.\n   * @param {string} name - name of the transform to lookup.\n   */\n  public getTransform(name: string): Collection.Transform<TData, TNested>[] {\n    return this._transforms[name];\n  }\n\n  /**\n   * Updates a named collection transform to the collection\n   * @param {string} name - name to associate with transform\n   * @param {object} transform - a transformation object to save into collection\n   */\n  public setTransform(name: string, transform: Collection.Transform<TData, TNested>[]): void {\n    this._transforms[name] = transform;\n  }\n\n  /**\n   * Removes a named collection transform from the collection\n   * @param {string} name - name of collection transform to remove\n   */\n  public removeTransform(name: string): void {\n    delete this._transforms[name];\n  }\n\n  /*----------------------------+\n   | TTL                        |\n   +----------------------------*/\n  private setTTL(age: number, interval: number): void {\n    if (age < 0) {\n      clearInterval(this._ttl.daemon);\n    } else {\n      this._ttl.age = age;\n      this._ttl.ttlInterval = interval;\n      this._ttl.daemon = setInterval(() => {\n        const now = Date.now();\n        const toRemove = this.chain().where((member: Doc<TData>) => {\n          const timestamp = member.meta.updated || member.meta.created;\n          const diff = now - timestamp;\n          return this._ttl.age < diff;\n        });\n        toRemove.remove();\n      }, interval);\n    }\n  }\n\n  /*----------------------------+\n   | INDEXING                   |\n   +----------------------------*/\n\n  /**\n   * Create a row filter that covers all documents in the collection.\n   */\n  _prepareFullDocIndex(): number[] {\n    const indexes = new Array(this._data.length);\n    for (let i = 0; i < indexes.length; i++) {\n      indexes[i] = i;\n    }\n    return indexes;\n  }\n\n  /**\n   * Ensure binary index on a certain field.\n   * @param {string} field - the field name\n   * @param {boolean} [force=false] - flag indicating whether to construct index immediately\n   */\n  public ensureIndex(field: keyof (TData & TNested), force = false) {\n    if (this._binaryIndices[field] && !force && !this._binaryIndices[field].dirty) {\n      return;\n    }\n\n    // if the index is already defined and we are using adaptiveBinaryIndices and we are not forcing a rebuild, return.\n    if (this._adaptiveBinaryIndices === true && this._binaryIndices[field] !== undefined && !force) {\n      return;\n    }\n\n    const index = {\n      name: field,\n      dirty: true,\n      values: this._prepareFullDocIndex()\n    };\n    this._binaryIndices[field] = index;\n\n    const wrappedComparer = (a: number, b: number) => {\n      const val1 = this._data[a][field];\n      const val2 = this._data[b][field];\n      if (val1 !== val2) {\n        if (ltHelper(val1, val2, false)) return -1;\n        if (gtHelper(val1, val2, false)) return 1;\n      }\n      return 0;\n    };\n\n    index.values.sort(wrappedComparer);\n    index.dirty = false;\n\n    this._dirty = true; // for autosave scenarios\n  }\n\n\n  /**\n   * Perform checks to determine validity/consistency of a binary index.\n   * @param {string} field - the field name of the binary-indexed to check\n   * @param {object=} options - optional configuration object\n   * @param {boolean} [options.randomSampling=false] - whether (faster) random sampling should be used\n   * @param {number} [options.randomSamplingFactor=0.10] - percentage of total rows to randomly sample\n   * @param {boolean} [options.repair=false] - whether to fix problems if they are encountered\n   * @returns {boolean} whether the index was found to be valid (before optional correcting).\n   * @example\n   * // full test\n   * var valid = coll.checkIndex('name');\n   * // full test with repair (if issues found)\n   * valid = coll.checkIndex('name', { repair: true });\n   * // random sampling (default is 10% of total document count)\n   * valid = coll.checkIndex('name', { randomSampling: true });\n   * // random sampling (sample 20% of total document count)\n   * valid = coll.checkIndex('name', { randomSampling: true, randomSamplingFactor: 0.20 });\n   * // random sampling (implied boolean)\n   * valid = coll.checkIndex('name', { randomSamplingFactor: 0.20 });\n   * // random sampling with repair (if issues found)\n   * valid = coll.checkIndex('name', { repair: true, randomSampling: true });\n   */\n  public checkIndex(field: keyof (TData & TNested), options: Collection.CheckIndexOptions = {repair: false}) {\n    // if lazy indexing, rebuild only if flagged as dirty\n    if (!this._adaptiveBinaryIndices) {\n      this.ensureIndex(field);\n    }\n\n    // if 'randomSamplingFactor' specified but not 'randomSampling', assume true\n    if (options.randomSamplingFactor && options.randomSampling !== false) {\n      options.randomSampling = true;\n    }\n    options.randomSamplingFactor = options.randomSamplingFactor || 0.1;\n    if (options.randomSamplingFactor < 0 || options.randomSamplingFactor > 1) {\n      options.randomSamplingFactor = 0.1;\n    }\n\n    const biv = this._binaryIndices[field].values;\n    const len = biv.length;\n\n    // if the index has an incorrect number of values\n    if (len !== this._data.length) {\n      if (options.repair) {\n        this.ensureIndex(field, true);\n      }\n      return false;\n    }\n\n    if (len === 0) {\n      return true;\n    }\n\n    let valid = true;\n    if (len === 1) {\n      valid = (biv[0] === 0);\n    } else {\n      if (options.randomSampling) {\n        // validate first and last\n        if (!LokiOps.$lte(this._data[biv[0]][field], this._data[biv[1]][field])) {\n          valid = false;\n        }\n        if (!LokiOps.$lte(this._data[biv[len - 2]][field], this._data[biv[len - 1]][field])) {\n          valid = false;\n        }\n\n        // if first and last positions are sorted correctly with their nearest neighbor,\n        // continue onto random sampling phase...\n        if (valid) {\n          // # random samplings = total count * sampling factor\n          const iter = Math.floor((len - 1) * options.randomSamplingFactor);\n\n          // for each random sampling, validate that the binary index is sequenced properly\n          // with next higher value.\n          for (let idx = 0; idx < iter; idx++) {\n            // calculate random position\n            const pos = Math.floor(Math.random() * (len - 1));\n            if (!LokiOps.$lte(this._data[biv[pos]][field], this._data[biv[pos + 1]][field])) {\n              valid = false;\n              break;\n            }\n          }\n        }\n      }\n      else {\n        // validate that the binary index is sequenced properly\n        for (let idx = 0; idx < len - 1; idx++) {\n          if (!LokiOps.$lte(this._data[biv[idx]][field], this._data[biv[idx + 1]][field])) {\n            valid = false;\n            break;\n          }\n        }\n      }\n    }\n\n    // if incorrectly sequenced and we are to fix problems, rebuild index\n    if (!valid && options.repair) {\n      this.ensureIndex(field, true);\n    }\n\n    return valid;\n  }\n\n  /**\n   * Perform checks to determine validity/consistency of all binary indices\n   * @param {object=} options - optional configuration object\n   * @param {boolean} [options.randomSampling=false] - whether (faster) random sampling should be used\n   * @param {number} [options.randomSamplingFactor=0.10] - percentage of total rows to randomly sample\n   * @param {boolean} [options.repair=false] - whether to fix problems if they are encountered\n   * @returns {string[]} array of index names where problems were found\n   * @example\n   * // check all indices on a collection, returns array of invalid index names\n   * var result = coll.checkAllIndexes({ repair: true, randomSampling: true, randomSamplingFactor: 0.15 });\n   * if (result.length > 0) {\n   *   results.forEach(function(name) {\n   *     console.log('problem encountered with index : ' + name);\n   *   });\n   * }\n   */\n  public checkAllIndexes(options?: Collection.CheckIndexOptions): (keyof TData & TNested)[] {\n    const results = [];\n    let keys = Object.keys(this._binaryIndices) as (keyof TData & TNested)[];\n    for (let i = 0; i < keys.length; i++) {\n      const result = this.checkIndex(keys[i], options);\n      if (!result) {\n        results.push(keys[i]);\n      }\n    }\n    return results;\n  }\n\n  public ensureUniqueIndex(field: keyof (TData & TNested)) {\n    let index = new UniqueIndex<TData & TNested>(field);\n\n    // if index already existed, (re)loading it will likely cause collisions, rebuild always\n    this._constraints.unique[field] = index;\n    for (let i = 0; i < this._data.length; i++) {\n      index.set(this._data[i], i);\n    }\n    return index;\n  }\n\n  /**\n   * Ensure all binary indices.\n   */\n  public ensureAllIndexes(force = false) {\n    const keys = Object.keys(this._binaryIndices) as (keyof (TData & TNested))[];\n    for (let i = 0; i < keys.length; i++) {\n      this.ensureIndex(keys[i], force);\n    }\n  }\n\n  public flagBinaryIndexesDirty() {\n    const keys = Object.keys(this._binaryIndices) as (keyof (TData & TNested))[];\n    for (let i = 0; i < keys.length; i++) {\n      this.flagBinaryIndexDirty(keys[i]);\n    }\n  }\n\n  public flagBinaryIndexDirty(index: keyof (TData & TNested)) {\n    this._binaryIndices[index].dirty = true;\n  }\n\n  /**\n   * Quickly determine number of documents in collection (or query)\n   * @param {object} query - (optional) query object to count results of\n   * @returns {number} number of documents in the collection\n   */\n  public count(query?: ResultSet.Query<Doc<TData & TNested>>): number {\n    if (!query) {\n      return this._data.length;\n    }\n    return this.chain().find(query)._filteredRows.length;\n  }\n\n  /**\n   * Rebuild idIndex\n   */\n  private _ensureId(): void {\n    this._idIndex = [];\n    for (let i = 0; i < this._data.length; i++) {\n      this._idIndex.push(this._data[i].$loki);\n    }\n  }\n\n  /**\n   * Add a dynamic view to the collection\n   * @param {string} name - name of dynamic view to add\n   * @param {object} options - (optional) options to configure dynamic view with\n   * @param {boolean} [options.persistent=false] - indicates if view is to main internal results array in 'resultdata'\n   * @param {string} [options.sortPriority=SortPriority.PASSIVE] - the sort priority\n   * @param {number} options.minRebuildInterval - minimum rebuild interval (need clarification to docs here)\n   * @returns {DynamicView} reference to the dynamic view added\n   **/\n  public addDynamicView(name: string, options?: DynamicView.Options): DynamicView<TData, TNested> {\n    const dv = new DynamicView<TData, TNested>(this, name, options);\n    this._dynamicViews.push(dv);\n\n    return dv;\n  }\n\n  /**\n   * Remove a dynamic view from the collection\n   * @param {string} name - name of dynamic view to remove\n   **/\n  public removeDynamicView(name: string): void {\n    for (let idx = 0; idx < this._dynamicViews.length; idx++) {\n      if (this._dynamicViews[idx].name === name) {\n        this._dynamicViews.splice(idx, 1);\n      }\n    }\n  }\n\n  /**\n   * Look up dynamic view reference from within the collection\n   * @param {string} name - name of dynamic view to retrieve reference of\n   * @returns {DynamicView} A reference to the dynamic view with that name\n   **/\n  public getDynamicView(name: string): DynamicView<TData, TNested> {\n    for (let idx = 0; idx < this._dynamicViews.length; idx++) {\n      if (this._dynamicViews[idx].name === name) {\n        return this._dynamicViews[idx];\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Applies a 'mongo-like' find query object and passes all results to an update function.\n   * @param {object} filterObject - the 'mongo-like' query object\n   * @param {function} updateFunction - the update function\n   */\n  public findAndUpdate(filterObject: ResultSet.Query<Doc<TData & TNested>>, updateFunction: (obj: Doc<TData>) => any) {\n    this.chain().find(filterObject).update(updateFunction);\n  }\n\n  /**\n   * Applies a 'mongo-like' find query object removes all documents which match that filter.\n   * @param {object} filterObject - 'mongo-like' query object\n   */\n  public findAndRemove(filterObject: ResultSet.Query<Doc<TData & TNested>>) {\n    this.chain().find(filterObject).remove();\n  }\n\n  /**\n   * Adds object(s) to collection, ensure object(s) have meta properties, clone it if necessary, etc.\n   * @param {(object|array)} doc - the document (or array of documents) to be inserted\n   * @returns {(object|array)} document or documents inserted\n   */\n  public insert(doc: TData): Doc<TData & TNested>;\n  public insert(doc: TData[]): Doc<TData & TNested>[];\n  public insert(doc: TData | TData[]): Doc<TData & TNested> | Doc<TData & TNested>[] {\n    if (!Array.isArray(doc)) {\n      return this.insertOne(doc);\n    }\n\n    // holder to the clone of the object inserted if collections is set to clone objects\n    let obj;\n    let results = [];\n\n    this.emit(\"pre-insert\", doc);\n    for (let i = 0; i < doc.length; i++) {\n      obj = this.insertOne(doc[i], true);\n      if (!obj) {\n        return undefined;\n      }\n      results.push(obj);\n    }\n    // at the 'batch' level, if clone option is true then emitted docs are clones\n    this.emit(\"insert\", results);\n\n    // if clone option is set, clone return values\n    results = this._cloneObjects ? clone(results, this._cloneMethod) : results;\n\n    return results.length === 1 ? results[0] : results;\n  }\n\n  /**\n   * Adds a single object, ensures it has meta properties, clone it if necessary, etc.\n   * @param {object} doc - the document to be inserted\n   * @param {boolean} bulkInsert - quiet pre-insert and insert event emits\n   * @returns {object} document or 'undefined' if there was a problem inserting it\n   */\n  public insertOne(doc: TData, bulkInsert = false): Doc<TData & TNested> {\n    let err = null;\n    let returnObj;\n\n    if (typeof doc !== \"object\") {\n      err = new TypeError(\"Document needs to be an object\");\n    } else if (doc === null) {\n      err = new TypeError(\"Object cannot be null\");\n    }\n\n    if (err !== null) {\n      this.emit(\"error\", err);\n      throw err;\n    }\n\n    // if configured to clone, do so now... otherwise just use same obj reference\n    const obj = this._defineNestedProperties(this._cloneObjects ? clone(doc, this._cloneMethod) : doc);\n\n    if (!this._disableMeta && (obj as Doc<TData>).meta === undefined) {\n      (obj as Doc<TData>).meta = {\n        version: 0,\n        revision: 0,\n        created: 0\n      };\n    }\n\n    // both 'pre-insert' and 'insert' events are passed internal data reference even when cloning\n    // insert needs internal reference because that is where loki itself listens to add meta\n    if (!bulkInsert) {\n      this.emit(\"pre-insert\", obj);\n    }\n    if (!this._add(obj)) {\n      return undefined;\n    }\n\n    // update meta and store changes if ChangesAPI is enabled\n    // (moved from \"insert\" event listener to allow internal reference to be used)\n    if (this._disableChangesApi) {\n      this._insertMeta(obj as Doc<TData>);\n    } else {\n      this._insertMetaWithChange(obj as Doc<TData>);\n    }\n\n    // if cloning is enabled, emit insert event with clone of new object\n    returnObj = this._cloneObjects ? clone(obj, this._cloneMethod) : obj;\n    if (!bulkInsert) {\n      this.emit(\"insert\", returnObj);\n    }\n\n    return returnObj as Doc<TData & TNested>;\n  }\n\n  /**\n   * Refers nested properties of an object to the root of it.\n   * @param {T} data - the object\n   * @returns {T & TNested} the object with nested properties\n   * @hidden\n   */\n  _defineNestedProperties<T extends object>(data: T): T & TNested {\n    for (let i = 0; i < this._nestedProperties.length; i++) {\n      const name = this._nestedProperties[i].name;\n      const path = this._nestedProperties[i].path;\n      Object.defineProperty(data, name, {\n        get() {\n          // Get the value of the nested property.\n          const array: any[] = [];\n          if (getNestedPropertyValue(this, path, array)) {\n            return array;\n          } else {\n            return array[0];\n          }\n        },\n        set(val: any) {\n          // Set the value of the nested property.\n          path.slice(0, path.length - 1).reduce((obj: any, part: string) =>\n            (obj && obj[part]) ? obj[part] : null, this)[path[path.length - 1]] = val;\n        },\n        enumerable: false,\n        configurable: true\n      });\n    }\n    return data as T & TNested;\n  }\n\n  /**\n   * Empties the collection.\n   * @param {boolean} [removeIndices=false] - remove indices\n   */\n  public clear({removeIndices: removeIndices = false} = {}) {\n    this._data = [];\n    this._idIndex = [];\n    this._cached = null;\n    this._maxId = 0;\n    this._dynamicViews = [];\n    this._dirty = true;\n\n    // if removing indices entirely\n    if (removeIndices === true) {\n      this._binaryIndices = {};\n\n      this._constraints = {\n        unique: {}\n      };\n    }\n    // clear indices but leave definitions in place\n    else {\n      // clear binary indices\n      const keys = Object.keys(this._binaryIndices);\n      keys.forEach((biname) => {\n        this._binaryIndices[biname].dirty = false;\n        this._binaryIndices[biname].values = [];\n      });\n\n      // clear entire unique indices definition\n      const uniqueNames = Object.keys(this._constraints.unique);\n      for (let i = 0; i < uniqueNames.length; i++) {\n        this._constraints.unique[uniqueNames[i]].clear();\n      }\n    }\n\n    if (this._fullTextSearch !== null) {\n      this._fullTextSearch.clear();\n    }\n  }\n\n  /**\n   * Updates an object and notifies collection that the document has changed.\n   * @param {object} doc - document to update within the collection\n   */\n  public update(doc: Doc<TData & TNested> | Doc<TData & TNested>[]): void {\n    if (Array.isArray(doc)) {\n\n      // If not cloning, disable adaptive binary indices for the duration of the batch update,\n      // followed by lazy rebuild and re-enabling adaptive indices after batch update.\n      const adaptiveBatchOverride = !this._cloneObjects && this._adaptiveBinaryIndices\n        && Object.keys(this._binaryIndices).length > 0;\n      if (adaptiveBatchOverride) {\n        this._adaptiveBinaryIndices = false;\n      }\n\n      for (let i = 0; i < doc.length; i++) {\n        this.update(doc[i]);\n      }\n\n      if (adaptiveBatchOverride) {\n        this.ensureAllIndexes();\n        this._adaptiveBinaryIndices = true;\n      }\n\n      return;\n    }\n    // Verify object is a properly formed document.\n    if (doc.$loki === undefined) {\n      throw new Error(\"Trying to update unsynced document. Please save the document first by using insert() or addMany()\");\n    }\n\n    try {\n      this.startTransaction();\n      const arr = this.get(doc.$loki, true);\n\n      if (!arr) {\n        throw new Error(\"Trying to update a document not in collection.\");\n      }\n\n      // ref to existing obj\n      let oldInternal = arr[0]; // -internal- obj ref\n      let position = arr[1]; // position in data array\n\n      // ref to new internal obj\n      // if configured to clone, do so now... otherwise just use same obj reference\n      let newInternal = this._defineNestedProperties(this._cloneObjects || !this._disableDeltaChangesApi ? clone(doc, this._cloneMethod) : doc);\n\n      this.emit(\"pre-update\", doc);\n\n      Object.keys(this._constraints.unique).forEach((key) => {\n        this._constraints.unique[key].update(newInternal, position);\n      });\n\n      // operate the update\n      this._data[position] = newInternal;\n\n      // now that we can efficiently determine the data[] position of newly added document,\n      // submit it for all registered DynamicViews to evaluate for inclusion/exclusion\n      for (let idx = 0; idx < this._dynamicViews.length; idx++) {\n        this._dynamicViews[idx]._evaluateDocument(position, false);\n      }\n\n      if (this._adaptiveBinaryIndices) {\n        // for each binary index defined in collection, immediately update rather than flag for lazy rebuild\n        const bIndices = Object.keys(this._binaryIndices) as (keyof (TData & TNested))[];\n        for (let i = 0; i < bIndices.length; i++) {\n          this.adaptiveBinaryIndexUpdate(position, bIndices[i]);\n        }\n      } else {\n        this.flagBinaryIndexesDirty();\n      }\n\n      this._idIndex[position] = newInternal.$loki;\n\n      // FullTextSearch.\n      if (this._fullTextSearch !== null) {\n        this._fullTextSearch.updateDocument(doc, position);\n      }\n\n      this.commit();\n      this._dirty = true; // for autosave scenarios\n\n      // update meta and store changes if ChangesAPI is enabled\n      if (this._disableChangesApi) {\n        this._updateMeta(newInternal);\n      }\n      else {\n        this._updateMetaWithChange(newInternal, oldInternal);\n      }\n\n      let returnObj = newInternal;\n      // if cloning is enabled, emit 'update' event and return with clone of new object\n      if (this._cloneObjects) {\n        returnObj = clone(newInternal, this._cloneMethod);\n      }\n\n      this.emit(\"update\", returnObj, oldInternal);\n    } catch (err) {\n      this.rollback();\n      this.emit(\"error\", err);\n      throw (err); // re-throw error so user does not think it succeeded\n    }\n  }\n\n  /**\n   * Add object to collection\n   */\n  private _add(obj: TData & TNested) {\n    // if parameter isn't object exit with throw\n    if (\"object\" !== typeof obj) {\n      throw new TypeError(\"Object being added needs to be an object\");\n    }\n    // if object you are adding already has id column it is either already in the collection\n    // or the object is carrying its own 'id' property.  If it also has a meta property,\n    // then this is already in collection so throw error, otherwise rename to originalId and continue adding.\n    if (obj[\"$loki\"] !== undefined) {\n      throw new Error(\"Document is already in collection, please use update()\");\n    }\n\n    /*\n     * try adding object to collection\n     */\n    try {\n      this.startTransaction();\n      this._maxId++;\n\n      if (isNaN(this._maxId)) {\n        this._maxId = (this._data[this._data.length - 1].$loki + 1);\n      }\n\n      const newDoc = obj as Doc<TData & TNested>;\n      newDoc.$loki = this._maxId;\n      if (!this._disableMeta) {\n        newDoc.meta.version = 0;\n      }\n\n      const constrUnique = this._constraints.unique;\n      for (const key in constrUnique) {\n        if (constrUnique[key] !== undefined) {\n          constrUnique[key].set(newDoc, this._data.length);\n        }\n      }\n\n      // add new obj id to idIndex\n      this._idIndex.push(newDoc.$loki);\n\n      // add the object\n      this._data.push(newDoc);\n\n      const addedPos = this._data.length - 1;\n\n      // now that we can efficiently determine the data[] position of newly added document,\n      // submit it for all registered DynamicViews to evaluate for inclusion/exclusion\n      const dvlen = this._dynamicViews.length;\n      for (let i = 0; i < dvlen; i++) {\n        this._dynamicViews[i]._evaluateDocument(addedPos, true);\n      }\n\n      if (this._adaptiveBinaryIndices) {\n        // for each binary index defined in collection, immediately update rather than flag for lazy rebuild\n        const bIndices = Object.keys(this._binaryIndices) as (keyof (TData & TNested))[];\n        for (let i = 0; i < bIndices.length; i++) {\n          this.adaptiveBinaryIndexInsert(addedPos, bIndices[i]);\n        }\n      } else {\n        this.flagBinaryIndexesDirty();\n      }\n\n      // FullTextSearch.\n      if (this._fullTextSearch !== null) {\n        this._fullTextSearch.addDocument(newDoc, addedPos);\n      }\n\n      this.commit();\n      this._dirty = true; // for autosave scenarios\n\n      return (this._cloneObjects) ? (clone(newDoc, this._cloneMethod)) : (newDoc);\n    } catch (err) {\n      this.rollback();\n      this.emit(\"error\", err);\n      throw (err); // re-throw error so user does not think it succeeded\n    }\n  }\n\n  /**\n   * Applies a filter function and passes all results to an update function.\n   * @param {function} filterFunction - the filter function\n   * @param {function} updateFunction - the update function\n   */\n  updateWhere(filterFunction: (obj: Doc<TData & TNested>) => boolean, updateFunction: (obj: Doc<TData & TNested>) => Doc<TData & TNested>) {\n    const results = this.where(filterFunction);\n    try {\n      for (let i = 0; i < results.length; i++) {\n        this.update(updateFunction(results[i]));\n      }\n    } catch (err) {\n      this.rollback();\n      throw err;\n    }\n  }\n\n  /**\n   * Remove all documents matching supplied filter function.\n   * @param {function} filterFunction - the filter function\n   */\n  public removeWhere(filterFunction: (obj: Doc<TData & TNested>) => boolean) {\n    this.remove(this._data.filter(filterFunction));\n  }\n\n  public removeDataOnly() {\n    this.remove(this._data.slice());\n  }\n\n  /**\n   * Remove a document from the collection\n   * @param {number|object} doc - document to remove from collection\n   */\n  remove(doc: number | Doc<TData & TNested> | Doc<TData & TNested>[]): void {\n    if (typeof doc === \"number\") {\n      doc = this.get(doc);\n    }\n\n    if (Array.isArray(doc)) {\n      let k = 0;\n      const len = doc.length;\n      for (k; k < len; k++) {\n        this.remove(doc[k]);\n      }\n      return;\n    }\n    if (doc.$loki === undefined) {\n      throw new Error(\"Object is not a document stored in the collection\");\n    }\n\n    try {\n      this.startTransaction();\n      const arr = this.get(doc.$loki, true);\n\n      const position = arr[1];\n\n      Object.keys(this._constraints.unique).forEach((key) => {\n        if (doc[key] !== null && doc[key] !== undefined) {\n          this._constraints.unique[key].remove(doc[key]);\n        }\n      });\n      // now that we can efficiently determine the data[] position of newly added document,\n      // submit it for all registered DynamicViews to remove\n      for (let idx = 0; idx < this._dynamicViews.length; idx++) {\n        this._dynamicViews[idx]._removeDocument(position);\n      }\n\n      if (this._adaptiveBinaryIndices) {\n        // for each binary index defined in collection, immediately update rather than flag for lazy rebuild\n        const bIndices = Object.keys(this._binaryIndices) as (keyof (TData & TNested))[];\n        for (let i = 0; i < bIndices.length; i++) {\n          this.adaptiveBinaryIndexRemove(position, bIndices[i]);\n        }\n      } else {\n        this.flagBinaryIndexesDirty();\n      }\n\n      this._data.splice(position, 1);\n\n      // remove id from idIndex\n      this._idIndex.splice(position, 1);\n\n      // FullTextSearch.\n      if (this._fullTextSearch !== null) {\n        this._fullTextSearch.removeDocument(doc, position);\n      }\n\n      this.commit();\n      this._dirty = true; // for autosave scenarios\n\n      if (!this._disableChangesApi) {\n        this._createChange(this.name, \"R\", arr[0]);\n      }\n\n      this.emit(\"delete\", arr[0]);\n      delete doc.$loki;\n      delete doc.meta;\n    } catch (err) {\n      this.rollback();\n      this.emit(\"error\", err);\n      throw err;\n    }\n  }\n\n  /*------------+\n   | Change API |\n   +------------*/\n  /**\n   * Returns all changes.\n   * @returns {Collection.Change[]}\n   */\n  public getChanges(): Collection.Change[] {\n    return this._changes;\n  }\n\n  /**\n   * Enables/disables changes api.\n   * @param {boolean} disableChangesApi\n   * @param {boolean} disableDeltaChangesApi\n   */\n  public setChangesApi(disableChangesApi: boolean, disableDeltaChangesApi: boolean = true) {\n    this._disableChangesApi = disableChangesApi;\n    this._disableDeltaChangesApi = disableChangesApi ? true : disableDeltaChangesApi;\n  }\n\n  /**\n   * Clears all the changes.\n   */\n  public flushChanges() {\n    this._changes = [];\n  }\n\n  private _getObjectDelta(oldObject: Doc<TData>, newObject: Doc<TData>) {\n    const propertyNames = newObject !== null && typeof newObject === \"object\" ? Object.keys(newObject) : null;\n    if (propertyNames && propertyNames.length && [\"string\", \"boolean\", \"number\"].indexOf(typeof(newObject)) < 0) {\n      const delta = {};\n      for (let i = 0; i < propertyNames.length; i++) {\n        const propertyName = propertyNames[i];\n        if (newObject.hasOwnProperty(propertyName)) {\n          if (!oldObject.hasOwnProperty(propertyName) || this._constraints.unique[propertyName] !== undefined\n            || propertyName === \"$loki\" || propertyName === \"meta\") {\n            delta[propertyName] = newObject[propertyName];\n          } else {\n            const propertyDelta = this._getObjectDelta(oldObject[propertyName], newObject[propertyName]);\n            if (propertyDelta !== undefined && propertyDelta !== {}) {\n              delta[propertyName] = propertyDelta;\n            }\n          }\n        }\n      }\n      return Object.keys(delta).length === 0 ? undefined : delta;\n    } else {\n      return oldObject === newObject ? undefined : newObject;\n    }\n  }\n\n  /**\n   * Compare changed object (which is a forced clone) with existing object and return the delta\n   */\n  private _getChangeDelta(obj: Doc<TData>, old: Doc<TData>) {\n    if (old) {\n      return this._getObjectDelta(old, obj);\n    } else {\n      return JSON.parse(JSON.stringify(obj));\n    }\n  }\n\n  /**\n   * Creates a clone of the current status of an object and associates operation and collection name,\n   * so the parent db can aggregate and generate a changes object for the entire db\n   */\n  private _createChange(name: string, op: string, obj: Doc<TData>, old?: Doc<TData>) {\n    this._changes.push({\n      name,\n      operation: op,\n      obj: op === \"U\" && !this._disableDeltaChangesApi\n        ? this._getChangeDelta(obj, old)\n        : JSON.parse(JSON.stringify(obj))\n    });\n  }\n\n  private _createInsertChange(obj: Doc<TData>) {\n    this._createChange(this.name, \"I\", obj);\n  }\n\n  private _createUpdateChange(obj: Doc<TData>, old: Doc<TData>) {\n    this._createChange(this.name, \"U\", obj, old);\n  }\n\n  private _insertMetaWithChange(obj: Doc<TData>) {\n    this._insertMeta(obj);\n    this._createInsertChange(obj);\n  }\n\n  private _updateMetaWithChange(obj: Doc<TData>, old: Doc<TData>) {\n    this._updateMeta(obj);\n    this._createUpdateChange(obj, old);\n  }\n\n  private _insertMeta(obj: Doc<TData>) {\n    if (this._disableMeta) {\n      return;\n    }\n\n    if (!obj.meta) {\n      obj.meta = {\n        version: 0,\n        revision: 0,\n        created: 0\n      };\n    }\n    obj.meta.created = (new Date()).getTime();\n    obj.meta.revision = 0;\n  }\n\n  private _updateMeta(obj: Doc<TData>) {\n    if (this._disableMeta) {\n      return;\n    }\n\n    obj.meta.updated = (new Date()).getTime();\n    obj.meta.revision += 1;\n  }\n\n  /*---------------------+\n   | Finding methods     |\n   +----------------------*/\n\n  /**\n   * Get by Id - faster than other methods because of the searching algorithm\n   * @param {int} id - $loki id of document you want to retrieve\n   * @param {boolean} returnPosition - if 'true' we will return [object, position]\n   * @returns {(object|array|null)} Object reference if document was found, null if not,\n   *     or an array if 'returnPosition' was passed.\n   */\n  public get(id: number): Doc<TData & TNested>;\n  public get(id: number, returnPosition: boolean): Doc<TData & TNested> | [Doc<TData & TNested>, number];\n  public get(id: number, returnPosition = false) {\n    const data = this._idIndex;\n    let max = data.length - 1;\n    let min = 0;\n    let mid = (min + max) >> 1;\n\n    id = typeof id === \"number\" ? id : parseInt(id, 10);\n\n    if (isNaN(id)) {\n      throw new TypeError(\"Passed id is not an integer\");\n    }\n\n    while (data[min] < data[max]) {\n      mid = (min + max) >> 1;\n\n      if (data[mid] < id) {\n        min = mid + 1;\n      } else {\n        max = mid;\n      }\n    }\n\n    if (max === min && data[min] === id) {\n      if (returnPosition) {\n        return [this._data[min], min];\n      }\n      return this._data[min];\n    }\n    return null;\n  }\n\n  /**\n   * Perform binary range lookup for the data[dataPosition][binaryIndexName] property value\n   *    Since multiple documents may contain the same value (which the index is sorted on),\n   *    we hone in on range and then linear scan range to find exact index array position.\n   * @param {int} dataPosition : data array index/position\n   * @param {string} binaryIndexName : index to search for dataPosition in\n   */\n  public getBinaryIndexPosition(dataPosition: number, binaryIndexName: keyof (TData & TNested)) {\n    const val = this._data[dataPosition][binaryIndexName];\n    const index = this._binaryIndices[binaryIndexName].values;\n\n    // i think calculateRange can probably be moved to collection\n    // as it doesn't seem to need ResultSet.  need to verify\n    //let rs = new ResultSet(this, null, null);\n    const range = this.calculateRange(\"$eq\", binaryIndexName, val);\n\n    if (range[0] === 0 && range[1] === -1) {\n      // uhoh didn't find range\n      return null;\n    }\n\n    const min = range[0];\n    const max = range[1];\n\n    // narrow down the sub-segment of index values\n    // where the indexed property value exactly matches our\n    // value and then linear scan to find exact -index- position\n    for (let idx = min; idx <= max; idx++) {\n      if (index[idx] === dataPosition) return idx;\n    }\n\n    // uhoh\n    return null;\n  }\n\n  /**\n   * Adaptively insert a selected item to the index.\n   * @param {int} dataPosition : coll.data array index/position\n   * @param {string} binaryIndexName : index to search for dataPosition in\n   */\n  public adaptiveBinaryIndexInsert(dataPosition: number, binaryIndexName: keyof (TData & TNested)) {\n    const index = this._binaryIndices[binaryIndexName].values;\n    let val: any = this._data[dataPosition][binaryIndexName];\n\n    // If you are inserting a javascript Date value into a binary index, convert to epoch time\n    if (this._serializableIndices === true && val instanceof Date) {\n      this._data[dataPosition][binaryIndexName] = val.getTime() as any;\n      val = this._data[dataPosition][binaryIndexName];\n    }\n\n    const idxPos = (index.length === 0) ? 0 : this._calculateRangeStart(binaryIndexName, val, true);\n\n    // insert new data index into our binary index at the proper sorted location for relevant property calculated by idxPos.\n    // doing this after adjusting dataPositions so no clash with previous item at that position.\n    this._binaryIndices[binaryIndexName].values.splice(idxPos, 0, dataPosition);\n  }\n\n  /**\n   * Adaptively update a selected item within an index.\n   * @param {int} dataPosition : coll.data array index/position\n   * @param {string} binaryIndexName : index to search for dataPosition in\n   */\n  public adaptiveBinaryIndexUpdate(dataPosition: number, binaryIndexName: keyof (TData & TNested)) {\n    // linear scan needed to find old position within index unless we optimize for clone scenarios later\n    // within (my) node 5.6.0, the following for() loop with strict compare is -much- faster than indexOf()\n    let idxPos;\n\n    const index = this._binaryIndices[binaryIndexName].values;\n    const len = index.length;\n\n    for (idxPos = 0; idxPos < len; idxPos++) {\n      if (index[idxPos] === dataPosition) break;\n    }\n\n    //let idxPos = this.binaryIndices[binaryIndexName].values.indexOf(dataPosition);\n    this._binaryIndices[binaryIndexName].values.splice(idxPos, 1);\n\n    //this.adaptiveBinaryIndexRemove(dataPosition, binaryIndexName, true);\n    this.adaptiveBinaryIndexInsert(dataPosition, binaryIndexName);\n  }\n\n  /**\n   * Adaptively remove a selected item from the index.\n   * @param {number} dataPosition : coll.data array index/position\n   * @param {string} binaryIndexName : index to search for dataPosition in\n   * @param {boolean} removedFromIndexOnly - remove from index only\n   */\n  public adaptiveBinaryIndexRemove(dataPosition: number, binaryIndexName: keyof (TData & TNested), removedFromIndexOnly = false): void {\n    const idxPos = this.getBinaryIndexPosition(dataPosition, binaryIndexName);\n    if (idxPos === null) {\n      return;\n    }\n\n    // remove document from index\n    this._binaryIndices[binaryIndexName].values.splice(idxPos, 1);\n\n    // if we passed this optional flag parameter, we are calling from adaptiveBinaryIndexUpdate,\n    // in which case data positions stay the same.\n    if (removedFromIndexOnly === true) {\n      return;\n    }\n\n    // since index stores data array positions, if we remove a document\n    // we need to adjust array positions -1 for all document positions greater than removed position\n    const index = this._binaryIndices[binaryIndexName].values;\n    for (let idx = 0; idx < index.length; idx++) {\n      if (index[idx] > dataPosition) {\n        index[idx]--;\n      }\n    }\n  }\n\n  /**\n   * Internal method used for index maintenance and indexed searching.\n   * Calculates the beginning of an index range for a given value.\n   * For index maintainance (adaptive:true), we will return a valid index position to insert to.\n   * For querying (adaptive:false/undefined), we will :\n   *    return lower bound/index of range of that value (if found)\n   *    return next lower index position if not found (hole)\n   * If index is empty it is assumed to be handled at higher level, so\n   * this method assumes there is at least 1 document in index.\n   *\n   * @param {string} prop - name of property which has binary index\n   * @param {any} val - value to find within index\n   * @param {bool?} adaptive - if true, we will return insert position\n   */\n  private _calculateRangeStart(prop: keyof (TData & TNested), val: any, adaptive = false): number {\n    const rcd = this._data;\n    const index = this._binaryIndices[prop].values;\n    let min = 0;\n    let max = index.length - 1;\n    let mid = 0;\n\n    if (index.length === 0) {\n      return -1;\n    }\n\n    // hone in on start position of value\n    while (min < max) {\n      mid = (min + max) >> 1;\n\n      if (ltHelper(rcd[index[mid]][prop], val, false)) {\n        min = mid + 1;\n      } else {\n        max = mid;\n      }\n    }\n\n    const lbound = min;\n\n    // found it... return it\n    if (aeqHelper(val, rcd[index[lbound]][prop])) {\n      return lbound;\n    }\n\n    // if not in index and our value is less than the found one\n    if (ltHelper(val, rcd[index[lbound]][prop], false)) {\n      return adaptive ? lbound : lbound - 1;\n    }\n\n    // not in index and our value is greater than the found one\n    return adaptive ? lbound + 1 : lbound;\n  }\n\n  /**\n   * Internal method used for indexed $between.  Given a prop (index name), and a value\n   * (which may or may not yet exist) this will find the final position of that upper range value.\n   */\n  private _calculateRangeEnd(prop: keyof (TData & TNested), val: any) {\n    const rcd = this._data;\n    const index = this._binaryIndices[prop].values;\n    let min = 0;\n    let max = index.length - 1;\n    let mid = 0;\n\n    if (index.length === 0) {\n      return -1;\n    }\n\n    // hone in on start position of value\n    while (min < max) {\n      mid = (min + max) >> 1;\n\n      if (ltHelper(val, rcd[index[mid]][prop], false)) {\n        max = mid;\n      } else {\n        min = mid + 1;\n      }\n    }\n\n    const ubound = max;\n\n    // only eq if last element in array is our val\n    if (aeqHelper(val, rcd[index[ubound]][prop])) {\n      return ubound;\n    }\n\n    // if not in index and our value is less than the found one\n    if (gtHelper(val, rcd[index[ubound]][prop], false)) {\n      return ubound + 1;\n    }\n\n    // either hole or first nonmatch\n    if (aeqHelper(val, rcd[index[ubound - 1]][prop])) {\n      return ubound - 1;\n    }\n\n    // hole, so ubound if nearest gt than the val we were looking for\n    return ubound;\n  }\n\n  /**\n   * Binary Search utility method to find range/segment of values matching criteria.\n   *    this is used for collection.find() and first find filter of ResultSet/dynview\n   *    slightly different than get() binary search in that get() hones in on 1 value,\n   *    but we have to hone in on many (range)\n   * @param {string} op - operation, such as $eq\n   * @param {string} prop - name of property to calculate range for\n   * @param {object} val - value to use for range calculation.\n   * @returns {array} [start, end] index array positions\n   */\n  public calculateRange(op: string, prop: keyof (TData & TNested), val: any): [number, number] {\n    const rcd = this._data;\n    const index = this._binaryIndices[prop].values;\n    const min = 0;\n    const max = index.length - 1;\n    let lbound;\n    let lval;\n    let ubound;\n\n    // when no documents are in collection, return empty range condition\n    if (rcd.length === 0) {\n      return [0, -1];\n    }\n\n    const minVal = rcd[index[min]][prop];\n    const maxVal = rcd[index[max]][prop];\n\n    // if value falls outside of our range return [0, -1] to designate no results\n    switch (op) {\n      case \"$eq\":\n      case \"$aeq\":\n        if (ltHelper(val, minVal, false) || gtHelper(val, maxVal, false)) {\n          return [0, -1];\n        }\n        break;\n      case \"$dteq\":\n        if (ltHelper(val, minVal, false) || gtHelper(val, maxVal, false)) {\n          return [0, -1];\n        }\n        break;\n      case \"$gt\":\n        // none are within range\n        if (gtHelper(val, maxVal, true)) {\n          return [0, -1];\n        }\n        // all are within range\n        if (gtHelper(minVal, val, false)) {\n          return [min, max];\n        }\n        break;\n      case \"$gte\":\n        // none are within range\n        if (gtHelper(val, maxVal, false)) {\n          return [0, -1];\n        }\n        // all are within range\n        if (gtHelper(minVal, val, true)) {\n          return [min, max];\n        }\n        break;\n      case \"$lt\":\n        // none are within range\n        if (ltHelper(val, minVal, true)) {\n          return [0, -1];\n        }\n        // all are within range\n        if (ltHelper(maxVal, val, false)) {\n          return [min, max];\n        }\n        break;\n      case \"$lte\":\n        // none are within range\n        if (ltHelper(val, minVal, false)) {\n          return [0, -1];\n        }\n        // all are within range\n        if (ltHelper(maxVal, val, true)) {\n          return [min, max];\n        }\n        break;\n      case \"$between\":\n        // none are within range (low range is greater)\n        if (gtHelper(val[0], maxVal, false)) {\n          return [0, -1];\n        }\n        // none are within range (high range lower)\n        if (ltHelper(val[1], minVal, false)) {\n          return [0, -1];\n        }\n\n        lbound = this._calculateRangeStart(prop, val[0]);\n        ubound = this._calculateRangeEnd(prop, val[1]);\n\n        if (lbound < 0) lbound++;\n        if (ubound > max) ubound--;\n\n        if (!gtHelper(rcd[index[lbound]][prop], val[0], true)) lbound++;\n        if (!ltHelper(rcd[index[ubound]][prop], val[1], true)) ubound--;\n\n        if (ubound < lbound) return [0, -1];\n\n        return ([lbound, ubound]);\n    }\n\n    // determine lbound where needed\n    switch (op) {\n      case \"$eq\":\n      case \"$aeq\":\n      case \"$dteq\":\n      case \"$gte\":\n      case \"$lt\":\n        lbound = this._calculateRangeStart(prop, val);\n        lval = rcd[index[lbound]][prop];\n        break;\n      default:\n        break;\n    }\n\n    // determine ubound where needed\n    switch (op) {\n      case \"$eq\":\n      case \"$aeq\":\n      case \"$dteq\":\n      case \"$lte\":\n      case \"$gt\":\n        ubound = this._calculateRangeEnd(prop, val);\n        break;\n      default:\n        break;\n    }\n\n\n    switch (op) {\n      case \"$eq\":\n      case \"$aeq\":\n      case \"$dteq\":\n        if (!aeqHelper(lval, val)) {\n          return [0, -1];\n        }\n        return [lbound, ubound];\n\n      case \"$gt\":\n        // (an eqHelper would probably be better test)\n        // if hole (not found) ub position is already greater\n        if (!aeqHelper(rcd[index[ubound]][prop], val)) {\n          //if (gtHelper(rcd[index[ubound]][prop], val, false)) {\n          return [ubound, max];\n        }\n        // otherwise (found) so ubound is still equal, get next\n        return [ubound + 1, max];\n\n      case \"$gte\":\n        // if hole (not found) lb position marks left outside of range\n        if (!aeqHelper(rcd[index[lbound]][prop], val)) {\n          //if (ltHelper(rcd[index[lbound]][prop], val, false)) {\n          return [lbound + 1, max];\n        }\n        // otherwise (found) so lb is first position where its equal\n        return [lbound, max];\n\n      case \"$lt\":\n        // if hole (not found) position already is less than\n        if (!aeqHelper(rcd[index[lbound]][prop], val)) {\n          //if (ltHelper(rcd[index[lbound]][prop], val, false)) {\n          return [min, lbound];\n        }\n        // otherwise (found) so lb marks left inside of eq range, get previous\n        return [min, lbound - 1];\n\n      case \"$lte\":\n        // if hole (not found) ub position marks right outside so get previous\n        if (!aeqHelper(rcd[index[ubound]][prop], val)) {\n          //if (gtHelper(rcd[index[ubound]][prop], val, false)) {\n          return [min, ubound - 1];\n        }\n        // otherwise (found) so ub is last position where its still equal\n        return [min, ubound];\n\n      default:\n        return [0, rcd.length - 1];\n    }\n  }\n\n  /**\n   * Retrieve doc by Unique index\n   * @param {string} field - name of uniquely indexed property to use when doing lookup\n   * @param {any} value - unique value to search for\n   * @returns {object} document matching the value passed\n   */\n  public by(field: keyof (TData & TNested), value: any): Doc<TData & TNested> {\n    return this.findOne({[field]: value} as any);\n  }\n\n  /**\n   * Find one object by index property, by property equal to value\n   * @param {object} query - query object used to perform search with\n   * @returns {(object|null)} First matching document, or null if none\n   */\n  public findOne(query: ResultSet.Query<Doc<TData & TNested>>): Doc<TData & TNested> {\n    query = query || {};\n\n    // Instantiate ResultSet and exec find op passing firstOnly = true param\n    const result = this.chain().find(query, true).data();\n\n    if (Array.isArray(result) && result.length === 0) {\n      return null;\n    } else {\n      if (!this._cloneObjects) {\n        return result[0] as any as Doc<TData & TNested>;\n      } else {\n        return clone(result[0], this._cloneMethod) as any as Doc<TData & TNested>;\n      }\n    }\n  }\n\n  /**\n   * Chain method, used for beginning a series of chained find() and/or view() operations\n   * on a collection.\n   *\n   * @param {array} transform - Ordered array of transform step objects similar to chain\n   * @param {object} parameters - Object containing properties representing parameters to substitute\n   * @returns {ResultSet} (this) ResultSet, or data array if any map or join functions where called\n   */\n  public chain(transform?: string | Collection.Transform<TData, TNested>[], parameters?: object): ResultSet<TData, TNested> {\n    const rs = new ResultSet<TData, TNested>(this);\n    if (transform === undefined) {\n      return rs;\n    }\n    return rs.transform(transform, parameters);\n  }\n\n  /**\n   * Find method, api is similar to mongodb.\n   * for more complex queries use [chain()]{@link Collection#chain} or [where()]{@link Collection#where}.\n   * @example {@tutorial Query Examples}\n   * @param {object} query - 'mongo-like' query object\n   * @returns {array} Array of matching documents\n   */\n  public find(query?: ResultSet.Query<Doc<TData & TNested>>): Doc<TData & TNested>[] {\n    return this.chain().find(query).data();\n  }\n\n  /**\n   * Find object by unindexed field by property equal to value,\n   * simply iterates and returns the first element matching the query\n   */\n  public findOneUnindexed(prop: string, value: any) {\n    let i = this._data.length;\n    let doc;\n    while (i--) {\n      if (this._data[i][prop] === value) {\n        doc = this._data[i];\n        return doc;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Transaction methods\n   */\n\n  /**\n   * start the transation\n   */\n  public startTransaction(): void {\n    if (this._transactional) {\n      this._cached = {\n        index: this._idIndex,\n        data: clone(this._data, this._cloneMethod),\n        binaryIndex: this._binaryIndices,\n      };\n\n      // propagate startTransaction to dynamic views\n      for (let idx = 0; idx < this._dynamicViews.length; idx++) {\n        this._dynamicViews[idx].startTransaction();\n      }\n    }\n  }\n\n  /**\n   * Commit the transaction.\n   */\n  public commit(): void {\n    if (this._transactional) {\n      this._cached = null;\n\n      // propagate commit to dynamic views\n      for (let idx = 0; idx < this._dynamicViews.length; idx++) {\n        this._dynamicViews[idx].commit();\n      }\n    }\n  }\n\n  /**\n   * Rollback the transaction.\n   */\n  public rollback(): void {\n    if (this._transactional) {\n      if (this._cached !== null) {\n        this._idIndex = this._cached.index;\n        this._data = this._defineNestedProperties(this._cached.data);\n        this._binaryIndices = this._cached.binaryIndex;\n\n        // propagate rollback to dynamic views\n        for (let idx = 0; idx < this._dynamicViews.length; idx++) {\n          this._dynamicViews[idx].rollback();\n        }\n      }\n    }\n  }\n\n  /**\n   * Query the collection by supplying a javascript filter function.\n   * @example\n   * let results = coll.where(function(obj) {\n\t *   return obj.legs === 8;\n\t * });\n   * @param {function} fun - filter function to run against all collection docs\n   * @returns {array} all documents which pass your filter function\n   */\n  public where(fun: (obj: Doc<TData & TNested>) => boolean): Doc<TData & TNested>[] {\n    return this.chain().where(fun).data();\n  }\n\n  /**\n   * Map Reduce operation\n   * @param {function} mapFunction - function to use as map function\n   * @param {function} reduceFunction - function to use as reduce function\n   * @returns {data} The result of your mapReduce operation\n   */\n  public mapReduce<T, U>(mapFunction: (value: Doc<TData & TNested>, index: number, array: Doc<TData & TNested>[]) => T, reduceFunction: (array: T[]) => U): U {\n    return reduceFunction(this._data.map(mapFunction));\n  }\n\n  /**\n   * Join two collections on specified properties\n   * @param {array} joinData - array of documents to 'join' to this collection\n   * @param {string} leftJoinProp - property name in collection\n   * @param {string} rightJoinProp - property name in joinData\n   * @param {function} mapFun - (Optional) map function to use\n   * @param dataOptions - options to data() before input to your map function\n   * @param [dataOptions.removeMeta] - allows removing meta before calling mapFun\n   * @param [dataOptions.forceClones] - forcing the return of cloned objects to your map object\n   * @param [dataOptions.forceCloneMethod] - allows overriding the default or collection specified cloning method\n   * @returns {ResultSet} Result of the mapping operation\n   */\n  public eqJoin(joinData: Collection<any> | ResultSet<any> | any[], leftJoinProp: string | ((obj: any) => string),\n                rightJoinProp: string | ((obj: any) => string), mapFun?: (left: any, right: any) => any,\n                dataOptions?: ResultSet.DataOptions): ResultSet<any> {\n    return new ResultSet(this).eqJoin(joinData, leftJoinProp, rightJoinProp, mapFun, dataOptions);\n  }\n\n  /* ------ STAGING API -------- */\n\n  /**\n   * (Staging API) create a stage and/or retrieve it\n   */\n  getStage(name: string) {\n    if (!this._stages[name]) {\n      this._stages[name] = {};\n    }\n    return this._stages[name];\n  }\n\n  /**\n   * a collection of objects recording the changes applied through a commmitStage\n   */\n\n  /**\n   * (Staging API) create a copy of an object and insert it into a stage\n   */\n  public stage<F extends TData>(stageName: string, obj: Doc<F>): F {\n    const copy = JSON.parse(JSON.stringify(obj));\n    this.getStage(stageName)[obj.$loki] = copy;\n    return copy;\n  }\n\n  /**\n   * (Staging API) re-attach all objects to the original collection, so indexes and views can be rebuilt\n   * then create a message to be inserted in the commitlog\n   * @param {string} stageName - name of stage\n   * @param {string} message\n   */\n  public commitStage(stageName: string, message: string) {\n    const stage = this.getStage(stageName);\n    const timestamp = new Date().getTime();\n\n    for (const prop in stage) {\n      this.update(stage[prop]);\n      this._commitLog.push({\n        timestamp,\n        message,\n        data: JSON.parse(JSON.stringify(stage[prop]))\n      });\n    }\n    this._stages[stageName] = {};\n  }\n\n  /**\n   * Returns all values of a field.\n   * @param {string} field - the field name\n   * @return {any}: the array of values\n   */\n  public extract(field: keyof (TData & TNested)): any[] {\n    const result = [];\n    for (let i = 0; i < this._data.length; i++) {\n      result.push(this._data[i][field]);\n    }\n    return result;\n  }\n\n  /**\n   * Finds the minimum value of a field.\n   * @param {string} field - the field name\n   * @return {number} the minimum value\n   */\n  public min(field: keyof (TData & TNested)): number {\n    return Math.min.apply(null, this.extractNumerical(field));\n  }\n\n  /**\n   * Finds the maximum value of a field.\n   * @param {string} field - the field name\n   * @return {number} the maximum value\n   */\n  public max(field: keyof (TData & TNested)): number {\n    return Math.max.apply(null, this.extractNumerical(field));\n  }\n\n  /**\n   * Finds the minimum value and its index of a field.\n   * @param {string} field - the field name\n   * @return {object} - index and value\n   */\n  public minRecord(field: keyof (TData & TNested)) {\n    const result = {\n      index: 0,\n      value: 0\n    };\n\n    if (this._data.length === 0) {\n      result.index = null;\n      result.value = null;\n      return result;\n    }\n\n    result.index = this._data[0].$loki;\n    result.value = parseFloat(this._data[0][field] as any);\n    for (let i = 1; i < this._data.length; i++) {\n      const val = parseFloat(this._data[i][field] as any);\n      if (result.value > val) {\n        result.value = val;\n        result.index = this._data[i].$loki;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Finds the maximum value and its index of a field.\n   * @param {string} field - the field name\n   * @return {object} - index and value\n   */\n  public maxRecord(field: keyof (TData & TNested)) {\n    const result = {\n      index: 0,\n      value: 0\n    };\n\n    if (this._data.length === 0) {\n      result.index = null;\n      result.value = null;\n      return result;\n    }\n\n    result.index = this._data[0].$loki;\n    result.value = parseFloat(this._data[0][field] as any);\n    for (let i = 1; i < this._data.length; i++) {\n      const val = parseFloat(this._data[i][field] as any);\n      if (result.value < val) {\n        result.value = val;\n        result.index = this._data[i].$loki;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Returns all values of a field as numbers (if possible).\n   * @param {string} field - the field name\n   * @return {number[]} - the number array\n   */\n  public extractNumerical(field: keyof (TData & TNested)) {\n    return this.extract(field).map(parseFloat).filter(Number).filter((n) => !(isNaN(n)));\n  }\n\n  /**\n   * Calculates the average numerical value of a field\n   * @param {string} field - the field name\n   * @returns {number} average of property in all docs in the collection\n   */\n  public avg(field: keyof (TData & TNested)): number {\n    return average(this.extractNumerical(field));\n  }\n\n  /**\n   * Calculate the standard deviation of a field.\n   * @param {string} field - the field name\n   * @return {number} the standard deviation\n   */\n  public stdDev(field: keyof (TData & TNested)): number {\n    return standardDeviation(this.extractNumerical(field));\n  }\n\n  /**\n   * Calculates the mode of a field.\n   * @param {string} field - the field name\n   * @return {number} the mode\n   */\n  public mode(field: keyof (TData & TNested)): number {\n    const dict = {};\n    const data = this.extractNumerical(field);\n\n    let mode = data[0];\n    let maxCount = -Infinity;\n    for (let i = 0; i < data.length; i++) {\n      const el = data[i];\n      if (dict[el]) {\n        dict[el]++;\n      } else {\n        dict[el] = 1;\n      }\n      if (dict[el] > maxCount) {\n        mode = el;\n        maxCount = dict[el];\n      }\n    }\n    return mode;\n  }\n\n  /**\n   * Calculates the median of a field.\n   * @param {string} field - the field name\n   * @return {number} the median\n   */\n  public median(field: keyof (TData & TNested)) {\n    const values = this.extractNumerical(field);\n    values.sort((a, b) => a - b);\n\n    const half = Math.floor(values.length / 2);\n\n    if (values.length % 2) {\n      return values[half];\n    } else {\n      return (values[half - 1] + values[half]) / 2.0;\n    }\n  }\n}\n\nexport namespace Collection {\n  export interface Options<TData extends object, TNested extends object = {}> {\n    unique?: (keyof (TData & TNested))[];\n    indices?: (keyof (TData & TNested))[];\n    adaptiveBinaryIndices?: boolean;\n    asyncListeners?: boolean;\n    disableMeta?: boolean;\n    disableChangesApi?: boolean;\n    disableDeltaChangesApi?: boolean;\n    clone?: boolean;\n    serializableIndices?: boolean;\n    cloneMethod?: CloneMethod;\n    transactional?: boolean;\n    ttl?: number;\n    ttlInterval?: number;\n    nestedProperties?: (keyof TNested | { name: keyof TNested, path: string[] })[];\n    fullTextSearch?: FullTextSearch.FieldOptions[];\n  }\n\n  export interface DeserializeOptions {\n    retainDirtyFlags?: boolean;\n    fullTextSearch?: Dict<Analyzer>;\n\n    [collName: string]: any | { proto?: any; inflate?: (src: object, dest?: object) => void };\n  }\n\n  export interface BinaryIndex {\n    dirty: boolean;\n    values: any;\n  }\n\n  export interface Change {\n    name: string;\n    operation: string;\n    obj: any;\n  }\n\n  export interface Serialized {\n    name: string;\n    _dynamicViews: DynamicView[];\n    _nestedProperties: { name: string, path: string[] }[];\n    uniqueNames: string[];\n    transforms: Dict<Transform[]>;\n    binaryIndices: Dict<Collection.BinaryIndex>;\n    _data: Doc<any>[];\n    idIndex: number[];\n    maxId: number;\n    _dirty: boolean;\n    adaptiveBinaryIndices: boolean;\n    transactional: boolean;\n    asyncListeners: boolean;\n    disableMeta: boolean;\n    disableChangesApi: boolean;\n    disableDeltaChangesApi: boolean;\n    cloneObjects: boolean;\n    cloneMethod: CloneMethod;\n    changes: any;\n    _fullTextSearch: FullTextSearch;\n  }\n\n  export interface CheckIndexOptions {\n    randomSampling?: boolean;\n    randomSamplingFactor?: number;\n    repair?: boolean;\n  }\n\n  export type Transform<TData extends object = object, TNested extends object = object> = {\n    type: \"find\";\n    value: ResultSet.Query<Doc<TData & TNested>> | string;\n  } | {\n    type: \"where\";\n    value: ((obj: Doc<TData & TNested>) => boolean) | string;\n  } | {\n    type: \"simplesort\";\n    property: keyof (TData & TNested);\n    options?: boolean | ResultSet.SimpleSortOptions;\n  } | {\n    type: \"compoundsort\";\n    value: (keyof (TData & TNested) | [keyof (TData & TNested), boolean])[];\n  } | {\n    type: \"sort\";\n    value: (a: Doc<TData & TNested>, b: Doc<TData & TNested>) => number;\n  } | {\n    type: \"sortByScoring\";\n    desc?: boolean;\n  } | {\n    type: \"limit\";\n    value: number;\n  } | {\n    type: \"offset\";\n    value: number;\n  } | {\n    type: \"map\";\n    value: (obj: Doc<TData & TNested>, index: number, array: Doc<TData & TNested>[]) => any;\n    dataOptions?: ResultSet.DataOptions;\n  } | {\n    type: \"eqJoin\";\n    joinData: Collection<any> | ResultSet<any>;\n    leftJoinKey: string | ((obj: any) => string);\n    rightJoinKey: string | ((obj: any) => string);\n    mapFun?: (left: any, right: any) => any;\n    dataOptions?: ResultSet.DataOptions;\n  } | {\n    type: \"mapReduce\";\n    mapFunction: (item: Doc<TData & TNested>, index: number, array: Doc<TData & TNested>[]) => any;\n    reduceFunction: (array: any[]) => any;\n  } | {\n    type: \"update\";\n    value: (obj: Doc<TData & TNested>) => any;\n  } | {\n    type: \"remove\";\n  };\n\n  export interface TTL {\n    age: number;\n    ttlInterval: number;\n    daemon: any; // setInterval Timer\n  }\n}\n","/**\n * LokiEventEmitter is a minimalist version of EventEmitter. It enables any\n * constructor that inherits EventEmitter to emit events and trigger\n * listeners that have been added to the event through the on(event, callback) method\n *\n * @constructor LokiEventEmitter\n */\nexport class LokiEventEmitter {\n  /**\n   * A map, with each property being an array of callbacks.\n   */\n  protected _events: object = {};\n\n  /**\n   * Determines whether or not the callbacks associated with each event should happen in an async fashion or not.\n   * Default is false, which means events are synchronous\n   */\n  protected _asyncListeners: boolean = false;\n\n  /**\n   * Adds a listener to the queue of callbacks associated to an event\n   * @param {string|string[]} eventName - the name(s) of the event(s) to listen to\n   * @param {function} listener - callback function of listener to attach\n   * @returns {int} the index of the callback in the array of listeners for a particular event\n   */\n  public on(eventName: string | string[], listener: Function): Function {\n    let event;\n\n    if (Array.isArray(eventName)) {\n      eventName.forEach((currentEventName) => {\n        this.on(currentEventName, listener);\n      });\n      return listener;\n    }\n\n    event = this._events[eventName];\n    if (!event) {\n      event = this._events[eventName] = [];\n    }\n    event.push(listener);\n    return listener;\n  }\n\n  /**\n   * Emits a particular event\n   * with the option of passing optional parameters which are going to be processed by the callback\n   * provided signatures match (i.e. if passing emit(event, arg0, arg1) the listener should take two parameters)\n   * @param {string} eventName - the name of the event\n   * @param {object} data - optional object passed with the event\n   */\n  protected emit(eventName: string, ...data: any[]): void {\n    if (eventName && this._events[eventName]) {\n      this._events[eventName].forEach((listener: Function) => {\n        if (this._asyncListeners) {\n          setTimeout(() => {\n            listener(...data);\n          }, 1);\n        } else {\n          listener(...data);\n        }\n      });\n    }\n  }\n\n  /**\n   * Alias of EventEmitter.on().\n   */\n  public addListener(eventName: string | string[], listener: Function) {\n    return this.on(eventName, listener);\n  }\n\n  /**\n   * Removes the listener at position 'index' from the event 'eventName'\n   * @param {string|string[]} eventName - the name(s) of the event(s) which the listener is attached to\n   * @param {function} listener - the listener callback function to remove from emitter\n   */\n  public removeListener(eventName: string | string[], listener: Function) {\n    if (Array.isArray(eventName)) {\n      eventName.forEach((currentEventName) => {\n        this.removeListener(currentEventName, listener);\n      });\n    }\n\n    if (this._events[eventName as string]) {\n      const listeners = this._events[eventName as string];\n      listeners.splice(listeners.indexOf(listener), 1);\n    }\n  }\n}\n","/* global global */\nimport {LokiEventEmitter} from \"./event_emitter\";\nimport {Collection} from \"./collection\";\nimport {Doc, StorageAdapter} from \"../../common/types\";\nimport {PLUGINS} from \"../../common/plugin\";\n\nfunction getENV(): Loki.Environment {\n  if (global !== undefined && (global[\"android\"] || global[\"NSObject\"])) {\n    return \"NATIVESCRIPT\";\n  }\n\n  const isNode = global !== undefined && ({}).toString.call(global) === \"[object global]\";\n  if (isNode) {\n    if (global[\"window\"]) {\n      return \"NODEJS\"; //node-webkit\n    } else {\n      return \"NODEJS\";\n    }\n  }\n\n  if (document !== undefined) {\n    if (document.URL.indexOf(\"http://\") === -1 && document.URL.indexOf(\"https://\") === -1) {\n      return \"CORDOVA\";\n    }\n    return \"BROWSER\";\n  }\n\n  const isBrowser = window !== undefined && ({}).toString.call(window) === \"[object Window]\";\n  if (isBrowser) {\n    return \"BROWSER\";\n  }\n  throw SyntaxError(\"Unknown environment...\");\n}\n\nexport class Loki extends LokiEventEmitter {\n  public filename: string;\n\n  // persist version of code which created the database to the database.\n  // could use for upgrade scenarios\n  private databaseVersion: number = 1.5; // TODO\n  private engineVersion: number = 1.5;\n\n  public _collections: Collection[];\n\n  private _env: Loki.Environment;\n\n  // currently keeping persistenceMethod and persistenceAdapter as loki level properties that\n  // will not or cannot be deserialized  You are required to configure persistence every time\n  // you instantiate a loki object (or use default environment detection) in order to load the database anyways.\n  private _serializationMethod: Loki.SerializationMethod;\n  private _destructureDelimiter: string;\n  // persistenceMethod could be 'fs', 'localStorage', or 'adapter'\n  // this is optional option param, otherwise environment detection will be used\n  // if user passes their own adapter we will force this method to 'adapter' later, so no need to pass method option.\n  private _persistenceMethod: Loki.PersistenceMethod = null;\n  // retain reference to optional (non-serializable) persistenceAdapter 'instance'\n  private _persistenceAdapter: StorageAdapter = null;\n\n  // flags used to throttle saves\n  private _throttledSaves: boolean = true;\n  private _throttledSaveRunning: Promise<void> = null;\n  private _throttledSavePending: Promise<void> = null;\n\n  // autosave support (disabled by default)\n  private _autosave: boolean = false;\n  private _autosaveInterval: number = 5000;\n  private _autosaveRunning: boolean = false;\n  private _autosaveHandler: Promise<void> = Promise.resolve();\n\n  /**\n   * Constructs the main database class.\n   * @param {string} filename - name of the file to be saved to\n   * @param {object} [options={}] - options\n   * @param {Loki.Environment} [options.env] - the javascript environment\n   * @param {Loki.SerializationMethod} [options.serializationMethod=NORMAL] - the serialization method\n   * @param {string} [options.destructureDelimiter=\"$<\\n\"] - string delimiter used for destructured serialization\n   */\n  constructor(filename = \"loki.db\", options: Loki.Options = {}) {\n    super();\n\n    this.filename = filename;\n    this._collections = [];\n\n    (\n      {\n        serializationMethod: this._serializationMethod = \"normal\",\n        destructureDelimiter: this._destructureDelimiter = \"$<\\n\",\n        env: this._env = getENV()\n      } = options\n    );\n\n    this._events = {\n      \"init\": [],\n      \"loaded\": [],\n      \"flushChanges\": [],\n      \"close\": [],\n      \"changes\": [],\n      \"warning\": []\n    };\n\n    this.on(\"init\", this.clearChanges);\n  }\n\n  /**\n   * configures options related to database persistence.\n   *\n   * @param {Loki.PersistenceOptions} [options={}] - options\n   * @param {adapter} [options.adapter=auto] - an instance of a loki persistence adapter\n   * @param {boolean} [options.autosave=false] - enables autosave\n   * @param {int} [options.autosaveInterval=5000] - time interval (in milliseconds) between saves (if dirty)\n   * @param {boolean} [options.autoload=false] - enables autoload on loki instantiation\n   * @param {object} options.inflate - options that are passed to loadDatabase if autoload enabled\n   * @param {boolean} [options.throttledSaves=true] - if true, it batches multiple calls to to saveDatabase reducing number of\n   *   disk I/O operations and guaranteeing proper serialization of the calls. Default value is true.\n   * @param {Loki.PersistenceMethod} options.persistenceMethod - a persistence method which should be used (FS_STORAGE, LOCAL_STORAGE...)\n   * @returns {Promise} a Promise that resolves after initialization and (if enabled) autoloading the database\n   */\n  public initializePersistence(options: Loki.PersistenceOptions = {}): Promise<void> {\n\n    let loaded = this._autosaveDisable();\n\n    (\n      {\n        autosave: this._autosave = false,\n        autosaveInterval: this._autosaveInterval = 5000,\n        persistenceMethod: this._persistenceMethod,\n        // TODO\n        //inflate: this.options.inflate,\n        throttledSaves: this._throttledSaves = true\n      } = options\n    );\n\n    const DEFAULT_PERSISTENCE = {\n      \"NODEJS\": [\"fs-storage\"],\n      \"BROWSER\": [\"local-storage\", \"indexed-storage\"],\n      \"CORDOVA\": [\"local-storage\", \"indexed-storage\"],\n      \"MEMORY\": [\"memory-storage\"]\n    };\n\n    const PERSISTENCE_METHODS = {\n      \"fs-storage\": PLUGINS[\"FSStorage\"],\n      \"local-storage\": PLUGINS[\"LocalStorage\"],\n      \"indexed-storage\": PLUGINS[\"IndexedStorage\"],\n      \"memory-storage\": PLUGINS[\"MemoryStorage\"]\n    };\n\n    // process the options\n    if (this._persistenceMethod !== undefined) {\n      // check if the specified persistence method is known\n      if (typeof(PERSISTENCE_METHODS[this._persistenceMethod]) === \"function\") {\n        this._persistenceAdapter = new (PERSISTENCE_METHODS[this._persistenceMethod]);\n      } else {\n        throw Error(\"Unknown persistence method.\");\n      }\n    }\n\n    // if user passes adapter, set persistence mode to adapter and retain persistence adapter instance\n    if (options.adapter !== undefined) {\n      this._persistenceMethod = \"adapter\";\n      this._persistenceAdapter = options.adapter;\n    }\n\n    // if by now there is no adapter specified by user nor derived from persistenceMethod: use sensible defaults\n    if (this._persistenceAdapter === null) {\n      let possiblePersistenceMethods = DEFAULT_PERSISTENCE[this._env];\n      if (possiblePersistenceMethods) {\n        for (let i = 0; i < possiblePersistenceMethods.length; i++) {\n          if (PERSISTENCE_METHODS[possiblePersistenceMethods[i]]) {\n            this._persistenceMethod = possiblePersistenceMethods[i];\n            this._persistenceAdapter = new (PERSISTENCE_METHODS[possiblePersistenceMethods[i]]);\n            break;\n          }\n        }\n      }\n    }\n\n    // if they want to load database on loki instantiation, now is a good time to load... after adapter set and before\n    // possible autosave initiation\n    if (options.autoload) {\n      loaded = loaded.then(() => this.loadDatabase(options.inflate));\n    }\n\n    return loaded.then(() => {\n      this._autosaveEnable();\n    });\n  }\n\n  /**\n   * Copies 'this' database into a new Loki instance. Object references are shared to make lightweight.\n   * @param {object} options - options\n   * @param {boolean} options.removeNonSerializable - nulls properties not safe for serialization.\n   */\n  public copy(options: Loki.CopyOptions = {}): Loki {\n    const databaseCopy = new Loki(this.filename, {env: this._env});\n\n    // currently inverting and letting loadJSONObject do most of the work\n    databaseCopy.loadJSONObject(this, {\n      retainDirtyFlags: true\n    });\n\n    // since our toJSON is not invoked for reference database adapters, this will let us mimic\n    if (options.removeNonSerializable) {\n      databaseCopy._persistenceAdapter = null;\n\n      for (let idx = 0; idx < databaseCopy._collections.length; idx++) {\n        databaseCopy._collections[idx]._constraints = null;\n        databaseCopy._collections[idx]._ttl = null;\n      }\n    }\n\n    return databaseCopy;\n  }\n\n  /**\n   * Adds a collection to the database.\n   * @param {string} name - name of collection to add\n   * @param {object} [options={}] - options to configure collection with.\n   * @param {array} [options.unique=[]] - array of property names to define unique constraints for\n   * @param {array} [options.exact=[]] - array of property names to define exact constraints for\n   * @param {array} [options.indices=[]] - array property names to define binary indexes for\n   * @param {boolean} [options.asyncListeners=false] - whether listeners are called asynchronously\n   * @param {boolean} [options.disableMeta=false] - set to true to disable meta property on documents\n   * @param {boolean} [options.disableChangesApi=true] - set to false to enable Changes Api\n   * @param {boolean} [options.disableDeltaChangesApi=true] - set to false to enable Delta Changes API (requires Changes API, forces cloning)\n   * @param {boolean} [options.clone=false] - specify whether inserts and queries clone to/from user\n   * @param {string} [options.cloneMethod=CloneMethod.DEEP] - the clone method\n   * @param {number} [options.ttl=] - age of document (in ms.) before document is considered aged/stale\n   * @param {number} [options.ttlInterval=] - time interval for clearing out 'aged' documents; not set by default\n   * @returns {Collection} a reference to the collection which was just added\n   */\n  public addCollection<TData extends object = object, TNested extends object = object>(name: string, options: Collection.Options<TData, TNested> = {}): Collection<TData, TNested> {\n    // Return an existing collection if a collection with the same name already exists.\n    for (let i = 0; i < this._collections.length; i++) {\n      if (this._collections[i].name === name) {\n        return this._collections[i] as Collection<TData, TNested>;\n      }\n    }\n    // Create a new collection otherwise.\n    const collection = new Collection<TData, TNested>(name, options);\n    this._collections.push(collection);\n    return collection;\n  }\n\n  public loadCollection(collection: Collection): void {\n    if (!collection.name) {\n      throw new Error(\"Collection must have a name property to be loaded\");\n    }\n    this._collections.push(collection);\n  }\n\n  /**\n   * Retrieves reference to a collection by name.\n   * @param {string} name - name of collection to look up\n   * @returns {Collection} Reference to collection in database by that name, or null if not found\n   */\n  public getCollection<TData extends object = object, TNested extends object = object>(name: string): Collection<TData, TNested> {\n    for (let i = 0; i < this._collections.length; i++) {\n      if (this._collections[i].name === name) {\n        return this._collections[i] as Collection<TData, TNested>;\n      }\n    }\n\n    // no such collection\n    this.emit(\"warning\", \"collection \" + name + \" not found\");\n    return null;\n  }\n\n  /**\n   * Renames an existing loki collection\n   * @param {string} oldName - name of collection to rename\n   * @param {string} newName - new name of collection\n   * @returns {Collection} reference to the newly renamed collection\n   */\n  public renameCollection<TData extends object = object, TNested extends object = object>(oldName: string, newName: string): Collection<TData, TNested> {\n    const c = this.getCollection<TData, TNested>(oldName);\n    if (c) {\n      c.name = newName;\n    }\n    return c;\n  }\n\n  public listCollections(): { name: string, count: number }[] {\n    const colls = [];\n    for (let i = 0; i < this._collections.length; i++) {\n      colls.push({\n        name: this._collections[i].name,\n        count: this._collections[i].count()\n      });\n    }\n    return colls;\n  }\n\n  /**\n   * Removes a collection from the database.\n   * @param {string} collectionName - name of collection to remove\n   */\n  public removeCollection(collectionName: string): void {\n    for (let i = 0; i < this._collections.length; i++) {\n      if (this._collections[i].name === collectionName) {\n        const tmpcol = new Collection(collectionName, {});\n        const curcol = this._collections[i];\n        for (const prop in curcol) {\n          if (curcol[prop] !== undefined && tmpcol[prop] !== undefined) {\n            curcol[prop] = tmpcol[prop];\n          }\n        }\n        this._collections.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Serialize database to a string which can be loaded via {@link Loki#loadJSON}\n   *\n   * @returns {string} Stringified representation of the loki database.\n   */\n  public serialize(options: Loki.SerializeOptions = {}) {\n    if (options.serializationMethod === undefined) {\n      options.serializationMethod = this._serializationMethod;\n    }\n\n    switch (options.serializationMethod) {\n      case \"normal\":\n        return JSON.stringify(this);\n      case \"pretty\":\n        return JSON.stringify(this, null, 2);\n      case \"destructured\":\n        return this.serializeDestructured(); // use default options\n      default:\n        return JSON.stringify(this);\n    }\n  }\n\n  // alias of serialize\n  public toJSON(): Loki.Serialized {\n    return {\n      _env: this._env,\n      _serializationMethod: this._serializationMethod,\n      _autosave: this._autosave,\n      _autosaveInterval: this._autosaveInterval,\n      _collections: this._collections,\n      databaseVersion: this.databaseVersion,\n      engineVersion: this.engineVersion,\n      filename: this.filename,\n      _persistenceAdapter: this._persistenceAdapter,\n      _persistenceMethod: this._persistenceMethod,\n      _throttledSaves: this._throttledSaves\n    };\n  }\n\n  /**\n   * Database level destructured JSON serialization routine to allow alternate serialization methods.\n   * Internally, Loki supports destructuring via loki \"serializationMethod' option and\n   * the optional LokiPartitioningAdapter class. It is also available if you wish to do\n   * your own structured persistence or data exchange.\n   *\n   * @param {object} options - output format options for use externally to loki\n   * @param {boolean} [options.partitioned=false] - whether db and each collection are separate\n   * @param {int} options.partition - can be used to only output an individual collection or db (-1)\n   * @param {boolean} [options.delimited=true] - whether subitems are delimited or subarrays\n   * @param {string} options.delimiter - override default delimiter\n   *\n   * @returns {string|Array} A custom, restructured aggregation of independent serializations.\n   */\n  public serializeDestructured(options: Loki.SerializeDestructuredOptions = {}): string | string[] {\n    if (options.partitioned === undefined) {\n      options.partitioned = false;\n    }\n\n    if (options.delimited === undefined) {\n      options.delimited = true;\n    }\n\n    if (options.delimiter === undefined) {\n      options.delimiter = this._destructureDelimiter;\n    }\n\n    // 'partitioned' along with 'partition' of 0 or greater is a request for single collection serialization\n    if (options.partitioned === true && options.partition !== undefined && options.partition >= 0) {\n      return this.serializeCollection({\n        delimited: options.delimited,\n        delimiter: options.delimiter,\n        collectionIndex: options.partition\n      });\n    }\n\n    // not just an individual collection, so we will need to serialize db container via shallow copy\n    let dbcopy = new Loki(this.filename);\n    dbcopy.loadJSONObject(this);\n\n    for (let idx = 0; idx < dbcopy._collections.length; idx++) {\n      dbcopy._collections[idx]._data = [];\n    }\n\n    // if we -only- wanted the db container portion, return it now\n    if (options.partitioned === true && options.partition === -1) {\n      // since we are deconstructing, override serializationMethod to normal for here\n      return dbcopy.serialize({\n        serializationMethod: \"normal\"\n      });\n    }\n\n    // at this point we must be deconstructing the entire database\n    // start by pushing db serialization into first array element\n    const reconstruct: string[] = [];\n    reconstruct.push(dbcopy.serialize({\n      serializationMethod: \"normal\"\n    }) as string);\n\n    dbcopy = null;\n\n    // push collection data into subsequent elements\n    for (let idx = 0; idx < this._collections.length; idx++) {\n      let result = this.serializeCollection({\n        delimited: options.delimited,\n        delimiter: options.delimiter,\n        collectionIndex: idx\n      });\n\n      // NDA : Non-Delimited Array : one iterable concatenated array with empty string collection partitions\n      if (options.partitioned === false && options.delimited === false) {\n        if (!Array.isArray(result)) {\n          throw new Error(\"a nondelimited, non partitioned collection serialization did not return an expected array\");\n        }\n\n        // Array.concat would probably duplicate memory overhead for copying strings.\n        // Instead copy each individually, and clear old value after each copy.\n        // Hopefully this will allow g.c. to reduce memory pressure, if needed.\n        for (let sidx = 0; sidx < result.length; sidx++) {\n          reconstruct.push(result[sidx]);\n          result[sidx] = null;\n        }\n        reconstruct.push(\"\");\n      } else {\n        reconstruct.push(result as string);\n      }\n    }\n\n    // Reconstruct / present results according to four combinations : D, DA, NDA, NDAA\n    if (options.partitioned) {\n      // DA : Delimited Array of strings [0] db [1] collection [n] collection { partitioned: true, delimited: true }\n      // useful for simple future adaptations of existing persistence adapters to save collections separately\n      if (options.delimited) {\n        return reconstruct;\n      }\n      // NDAA : Non-Delimited Array with subArrays. db at [0] and collection subarrays at [n] { partitioned: true, delimited : false }\n      // This format might be the most versatile for 'rolling your own' partitioned sync or save.\n      // Memory overhead can be reduced by specifying a specific partition, but at this code path they did not, so its all.\n      else {\n        return reconstruct;\n      }\n    } else {\n      // D : one big Delimited string { partitioned: false, delimited : true }\n      // This is the method Loki will use internally if 'destructured'.\n      // Little memory overhead improvements but does not require multiple asynchronous adapter call scheduling\n      if (options.delimited) {\n        // indicate no more collections\n        reconstruct.push(\"\");\n\n        return reconstruct.join(options.delimiter);\n      }\n      // NDA : Non-Delimited Array : one iterable array with empty string collection partitions { partitioned: false, delimited: false }\n      // This format might be best candidate for custom synchronous syncs or saves\n      else {\n        // indicate no more collections\n        reconstruct.push(\"\");\n\n        return reconstruct;\n      }\n    }\n  }\n\n  /**\n   * Collection level utility method to serialize a collection in a 'destructured' format\n   *\n   * @param {object} options - used to determine output of method\n   * @param {int} options.delimited - whether to return single delimited string or an array\n   * @param {string} options.delimiter - (optional) if delimited, this is delimiter to use\n   * @param {int} options.collectionIndex -  specify which collection to serialize data for\n   *\n   * @returns {string|array} A custom, restructured aggregation of independent serializations for a single collection.\n   */\n  public serializeCollection(options: { delimited?: boolean; collectionIndex?: number; delimiter?: string } = {}): string | string[] {\n    if (options.delimited === undefined) {\n      options.delimited = true;\n    }\n\n    if (options.collectionIndex === undefined) {\n      throw new Error(\"serializeCollection called without 'collectionIndex' option\");\n    }\n    const doccount = this._collections[options.collectionIndex].count();\n\n    let resultlines = [];\n    for (let docidx = 0; docidx < doccount; docidx++) {\n      resultlines.push(JSON.stringify(this._collections[options.collectionIndex]._data[docidx]));\n    }\n\n    // D and DA\n    if (options.delimited) {\n      // indicate no more documents in collection (via empty delimited string)\n      resultlines.push(\"\");\n\n      return resultlines.join(options.delimiter);\n    } else {\n      // NDAA and NDA\n      return resultlines;\n    }\n  }\n\n  /**\n   * Database level destructured JSON deserialization routine to minimize memory overhead.\n   * Internally, Loki supports destructuring via loki \"serializationMethod' option and\n   * the optional LokiPartitioningAdapter class. It is also available if you wish to do\n   * your own structured persistence or data exchange.\n   *\n   * @param {string|array} destructuredSource - destructured json or array to deserialize from\n   * @param {object} options - source format options\n   * @param {boolean} [options.partitioned=false] - whether db and each collection are separate\n   * @param {int} options.partition - can be used to deserialize only a single partition\n   * @param {boolean} [options.delimited=true] - whether subitems are delimited or subarrays\n   * @param {string} options.delimiter - override default delimiter\n   *\n   * @returns {object|array} An object representation of the deserialized database, not yet applied to 'this' db or document array\n   */\n  public deserializeDestructured(destructuredSource: string | string[], options: Loki.SerializeDestructuredOptions = {}) {\n    if (options.partitioned === undefined) {\n      options.partitioned = false;\n    }\n\n    if (options.delimited === undefined) {\n      options.delimited = true;\n    }\n\n    if (options.delimiter === undefined) {\n      options.delimiter = this._destructureDelimiter;\n    }\n\n    // Partitioned\n    // DA : Delimited Array of strings [0] db [1] collection [n] collection { partitioned: true, delimited: true }\n    // NDAA : Non-Delimited Array with subArrays. db at [0] and collection subarrays at [n] { partitioned: true, delimited : false }\n    // -or- single partition\n    if (options.partitioned) {\n      // handle single partition\n      if (options.partition !== undefined) {\n        // db only\n        if (options.partition === -1) {\n          return JSON.parse(destructuredSource[0]);\n        }\n\n        // single collection, return doc array\n        return this.deserializeCollection(destructuredSource[options.partition + 1], options);\n      }\n\n      // Otherwise we are restoring an entire partitioned db\n      const cdb = JSON.parse(destructuredSource[0]);\n      const collCount = cdb._collections.length;\n      for (let collIndex = 0; collIndex < collCount; collIndex++) {\n        // attach each collection docarray to container collection data, add 1 to collection array index since db is at 0\n        cdb._collections[collIndex]._data = this.deserializeCollection(destructuredSource[collIndex + 1], options);\n      }\n\n      return cdb;\n    }\n\n    // Non-Partitioned\n    // D : one big Delimited string { partitioned: false, delimited : true }\n    // NDA : Non-Delimited Array : one iterable array with empty string collection partitions { partitioned: false, delimited: false }\n\n    let workarray = [];\n\n    // D\n    if (options.delimited) {\n      workarray = (destructuredSource as string).split(options.delimiter);\n      destructuredSource = null; // lower memory pressure\n      if (workarray.length === 0) {\n        return null;\n      }\n    }\n    // NDA\n    else {\n      workarray = destructuredSource as string[];\n    }\n\n    // first line is database and collection shells\n    const cdb = JSON.parse(workarray[0]);\n    const collCount = cdb._collections.length;\n    workarray[0] = null;\n\n    let collIndex = 0;\n    let lineIndex = 1;\n    let done = false;\n    while (!done) {\n      // empty string indicates either end of collection or end of file\n      if (workarray[lineIndex] === \"\") {\n        // if no more collections to load into, we are done\n        if (++collIndex > collCount) {\n          done = true;\n        }\n      } else {\n        cdb._collections[collIndex]._data.push(JSON.parse(workarray[lineIndex]));\n      }\n\n      // lower memory pressure and advance iterator\n      workarray[lineIndex++] = null;\n    }\n\n    return cdb;\n  }\n\n  /**\n   * Collection level utility function to deserializes a destructured collection.\n   *\n   * @param {string|string[]} destructuredSource - destructured representation of collection to inflate\n   * @param {object} options - used to describe format of destructuredSource input\n   * @param {int} [options.delimited=false] - whether source is delimited string or an array\n   * @param {string} options.delimiter - if delimited, this is delimiter to use (if other than default)\n   *\n   * @returns {Array} an array of documents to attach to collection.data.\n   */\n  public deserializeCollection<T extends object = object>(destructuredSource: string | string[], options: Loki.DeserializeCollectionOptions = {}): Doc<T>[] {\n    if (options.partitioned === undefined) {\n      options.partitioned = false;\n    }\n\n    if (options.delimited === undefined) {\n      options.delimited = true;\n    }\n\n    if (options.delimiter === undefined) {\n      options.delimiter = this._destructureDelimiter;\n    }\n\n    let workarray = [];\n    if (options.delimited) {\n      workarray = (destructuredSource as string).split(options.delimiter);\n      workarray.pop();\n    } else {\n      workarray = destructuredSource as string[];\n    }\n\n    for (let idx = 0; idx < workarray.length; idx++) {\n      workarray[idx] = JSON.parse(workarray[idx]);\n    }\n    return workarray as any as Doc<T>[];\n  }\n\n  /**\n   * Inflates a loki database from a serialized JSON string\n   *\n   * @param {string} serializedDb - a serialized loki database string\n   * @param {object} options - apply or override collection level settings\n   * @param {boolean} options.retainDirtyFlags - whether collection dirty flags will be preserved\n   */\n  public loadJSON(serializedDb: string | string[], options?: Collection.DeserializeOptions): void {\n    let dbObject;\n    if (serializedDb.length === 0) {\n      dbObject = {};\n    } else {\n      // using option defined in instantiated db not what was in serialized db\n      switch (this._serializationMethod) {\n        case \"normal\":\n        case \"pretty\":\n          dbObject = JSON.parse(serializedDb as string);\n          break;\n        case \"destructured\":\n          dbObject = this.deserializeDestructured(serializedDb);\n          break;\n        default:\n          dbObject = JSON.parse(serializedDb as string);\n          break;\n      }\n    }\n    this.loadJSONObject(dbObject, options);\n  }\n\n  /**\n   * Inflates a loki database from a JS object\n   *\n   * @param {object} dbObject - a serialized loki database object\n   * @param {object} options - apply or override collection level settings\n   * @param {boolean} options.retainDirtyFlags - whether collection dirty flags will be preserved\n   */\n  public loadJSONObject(dbObject: Loki, options?: Collection.DeserializeOptions): void;\n  public loadJSONObject(dbObject: Loki.Serialized, options?: Collection.DeserializeOptions): void;\n  public loadJSONObject(dbObject: any, options: Collection.DeserializeOptions = {}): void {\n    const len = dbObject._collections ? dbObject._collections.length : 0;\n\n    this.filename = dbObject.filename;\n    this._collections = [];\n\n    for (let i = 0; i < len; ++i) {\n      this._collections.push(Collection.fromJSONObject(dbObject._collections[i], options));\n    }\n  }\n\n  /**\n   * Emits the close event. In autosave scenarios, if the database is dirty, this will save and disable timer.\n   * Does not actually destroy the db.\n   *\n   * @returns {Promise} a Promise that resolves after closing the database succeeded\n   */\n  public close(): Promise<void> {\n    // for autosave scenarios, we will let close perform final save (if dirty)\n    // For web use, you might call from window.onbeforeunload to shutdown database, saving pending changes\n    if (this._autosave) {\n      return this._autosaveDisable()\n        .then(() => {\n          if (this._autosaveDirty()) {\n            return this.saveDatabase();\n          }\n          return Promise.resolve();\n        });\n    }\n\n    return Promise.resolve().then(() => {\n      this.emit(\"close\");\n    });\n  }\n\n  /**-------------------------+\n   | Changes API               |\n   +--------------------------*/\n\n  /**\n   * The Changes API enables the tracking the changes occurred in the collections since the beginning of the session,\n   * so it's possible to create a differential dataset for synchronization purposes (possibly to a remote db)\n   */\n\n  /**\n   * (Changes API) : takes all the changes stored in each\n   * collection and creates a single array for the entire database. If an array of names\n   * of collections is passed then only the included collections will be tracked.\n   *\n   * @param {Array} [arrayOfCollectionNames=] - array of collection names. No arg means all collections are processed.\n   * @returns {Array} array of changes\n   * @see private method _createChange() in Collection\n   */\n  public generateChangesNotification(arrayOfCollectionNames?: string[]): Collection.Change[] {\n    let changes: Collection.Change[] = [];\n    const selectedCollections = arrayOfCollectionNames\n      || this._collections.map((coll: Collection) => coll.name);\n\n    this._collections.forEach((coll) => {\n      if (selectedCollections.indexOf(coll.name) !== -1) {\n        changes = changes.concat(coll.getChanges());\n      }\n    });\n    return changes;\n  }\n\n  /**\n   * (Changes API) - stringify changes for network transmission\n   * @returns {string} string representation of the changes\n   */\n  public serializeChanges(collectionNamesArray?: string[]) {\n    return JSON.stringify(this.generateChangesNotification(collectionNamesArray));\n  }\n\n  /**\n   * (Changes API) : clears all the changes in all collections.\n   */\n  public clearChanges() {\n    this._collections.forEach((coll) => {\n      if (coll.flushChanges) {\n        coll.flushChanges();\n      }\n    });\n  }\n\n  /**\n   * Wait for throttledSaves to complete and invoke your callback when drained or duration is met.\n   *\n   * @param {object} options - configuration options\n   * @param {boolean} [options.recursiveWait=true] - if after queue is drained, another save was kicked off, wait for it\n   * @param {boolean} [options.recursiveWaitLimit=false] - limit our recursive waiting to a duration\n   * @param {number} [options.recursiveWaitLimitDuration=2000] - cutoff in ms to stop recursively re-draining\n   * @param {Date} [options.started=now()] - the start time of the recursive wait duration\n   * @returns {Promise} a Promise that resolves when save queue is drained, it is passed a sucess parameter value\n   */\n  throttledSaveDrain(options: Loki.ThrottledDrainOptions = {}): Promise<void> {\n    const now = (new Date()).getTime();\n\n    if (!this._throttledSaves) {\n      return Promise.resolve();\n    }\n\n    if (options.recursiveWait === undefined) {\n      options.recursiveWait = true;\n    }\n    if (options.recursiveWaitLimit === undefined) {\n      options.recursiveWaitLimit = false;\n    }\n    if (options.recursiveWaitLimitDuration === undefined) {\n      options.recursiveWaitLimitDuration = 2000;\n    }\n    if (options.started === undefined) {\n      options.started = new Date();\n    }\n\n    // if save is pending\n    if (this._throttledSaves && this._throttledSaveRunning !== null) {\n      // if we want to wait until we are in a state where there are no pending saves at all\n      if (options.recursiveWait) {\n        // queue the following meta callback for when it completes\n        return Promise.resolve(Promise.all([this._throttledSaveRunning, this._throttledSavePending])).then(() => {\n          if (this._throttledSaveRunning !== null || this._throttledSavePending !== null) {\n            if (options.recursiveWaitLimit && (now - options.started.getTime() > options.recursiveWaitLimitDuration)) {\n              return Promise.reject({});\n            }\n            return this.throttledSaveDrain(options);\n          } else {\n            return Promise.resolve();\n          }\n        });\n      }\n      // just notify when current queue is depleted\n      else {\n        return Promise.resolve(this._throttledSaveRunning);\n      }\n    }\n    // no save pending, just callback\n    else {\n      return Promise.resolve();\n    }\n  }\n\n  /**\n   * Internal load logic, decoupled from throttling/contention logic\n   *\n   * @param {object} options - an object containing inflation options for each collection\n   * @returns {Promise} a Promise that resolves after the database is loaded\n   */\n  private _loadDatabase(options = {}) {\n    // the persistenceAdapter should be present if all is ok, but check to be sure.\n    if (this._persistenceAdapter === null) {\n      return Promise.reject(new Error(\"persistenceAdapter not configured\"));\n    }\n\n    return Promise.resolve(this._persistenceAdapter.loadDatabase(this.filename))\n      .then((dbString) => {\n        if (typeof (dbString) === \"string\") {\n          this.loadJSON(dbString, options);\n          this.emit(\"load\", this);\n        } else {\n          dbString = dbString as object;\n          // if adapter has returned an js object (other than null or error) attempt to load from JSON object\n          if (typeof (dbString) === \"object\" && dbString !== null && !(dbString instanceof Error)) {\n            this.loadJSONObject(dbString, options);\n            this.emit(\"load\", this);\n          } else {\n            if (dbString instanceof Error)\n              throw dbString;\n\n            throw new TypeError(\"The persistence adapter did not load a serialized DB string or object.\");\n          }\n        }\n      });\n  }\n\n  /**\n   * Handles manually loading from an adapter storage (such as fs-storage)\n   *    This method utilizes loki configuration options (if provided) to determine which\n   *    persistence method to use, or environment detection (if configuration was not provided).\n   *    To avoid contention with any throttledSaves, we will drain the save queue first.\n   *\n   * If you are configured with autosave, you do not need to call this method yourself.\n   *\n   * @param {object} [options={}] - if throttling saves and loads, this controls how we drain save queue before loading\n   * @param {boolean} [options.recursiveWait=true] wait recursively until no saves are queued\n   * @param {boolean} [options.recursiveWaitLimit=false] limit our recursive waiting to a duration\n   * @param {number} [options.recursiveWaitLimitDelay=2000] cutoff in ms to stop recursively re-draining\n   * @param {Date} [options.started=now()] - the start time of the recursive wait duration\n   * @returns {Promise} a Promise that resolves after the database is loaded\n   */\n  public loadDatabase(options: Loki.LoadDatabaseOptions = {}): Promise<void> {\n    // if throttling disabled, just call internal\n    if (!this._throttledSaves) {\n      return this._loadDatabase(options);\n    }\n\n    // try to drain any pending saves in the queue to lock it for loading\n    return this.throttledSaveDrain(options).then(() => {\n      // pause/throttle saving until loading is done\n      this._throttledSaveRunning = this._loadDatabase(options).then(() => {\n        // now that we are finished loading, if no saves were throttled, disable flag\n        this._throttledSaveRunning = null;\n      });\n      return this._throttledSaveRunning;\n    }, () => {\n      throw new Error(\"Unable to pause save throttling long enough to read database\");\n    });\n  }\n\n  private _saveDatabase() {\n    // the persistenceAdapter should be present if all is ok, but check to be sure.\n    if (this._persistenceAdapter === null) {\n      return Promise.reject(new Error(\"persistenceAdapter not configured\"));\n    }\n\n    // check if the adapter is requesting (and supports) a 'reference' mode export\n    if (this._persistenceAdapter.mode === \"reference\" && typeof this._persistenceAdapter.exportDatabase === \"function\") {\n      // filename may seem redundant but loadDatabase will need to expect this same filename\n      return Promise.resolve(this._persistenceAdapter.exportDatabase(this.filename, this.copy({removeNonSerializable: true})))\n        .then(() => {\n          this._autosaveClearFlags();\n          this.emit(\"save\");\n        });\n    }\n\n    // otherwise just pass the serialized database to adapter\n    // persistenceAdapter might be asynchronous, so we must clear `dirty` immediately\n    // or autosave won't work if an update occurs between here and the callback\n    this._autosaveClearFlags();\n    return Promise.resolve(this._persistenceAdapter.saveDatabase(this.filename, this.serialize() as string))\n      .then(() => {\n        this.emit(\"save\");\n      });\n  }\n\n  /**\n   * Handles manually saving to an adapter storage (such as fs-storage)\n   *    This method utilizes loki configuration options (if provided) to determine which\n   *    persistence method to use, or environment detection (if configuration was not provided).\n   *\n   * If you are configured with autosave, you do not need to call this method yourself.\n   *\n   * @returns {Promise} a Promise that resolves after the database is persisted\n   */\n  public saveDatabase() {\n    if (!this._throttledSaves) {\n      return this._saveDatabase();\n    }\n\n    // if the db save is currently running, a new promise for a next db save is created\n    // all calls to save db will get this new promise which will be processed right after\n    // the current db save is finished\n    if (this._throttledSaveRunning !== null && this._throttledSavePending === null) {\n      this._throttledSavePending = Promise.resolve(this._throttledSaveRunning).then(() => {\n        this._throttledSaveRunning = null;\n        this._throttledSavePending = null;\n        return this.saveDatabase();\n      });\n    }\n\n    if (this._throttledSavePending !== null) {\n      return this._throttledSavePending;\n    }\n    this._throttledSaveRunning = this._saveDatabase().then(() => {\n      this._throttledSaveRunning = null;\n    });\n\n    return this._throttledSaveRunning;\n  }\n\n  /**\n   * Handles deleting a database from the underlying storage adapter\n   *\n   * @returns {Promise} a Promise that resolves after the database is deleted\n   */\n  public deleteDatabase() {\n    // the persistenceAdapter should be present if all is ok, but check to be sure.\n    if (this._persistenceAdapter === null) {\n      return Promise.reject(new Error(\"persistenceAdapter not configured\"));\n    }\n\n    return Promise.resolve(this._persistenceAdapter.deleteDatabase(this.filename));\n  }\n\n  /****************\n   * Autosave API\n   ****************/\n\n  /**\n   * Check whether any collections are \"dirty\" meaning we need to save the (entire) database\n   * @returns {boolean} - true if database has changed since last autosave, otherwise false\n   */\n  private _autosaveDirty(): boolean {\n    for (let idx = 0; idx < this._collections.length; idx++) {\n      if (this._collections[idx]._dirty) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Resets dirty flags on all collections.\n   */\n  private _autosaveClearFlags() {\n    for (let idx = 0; idx < this._collections.length; idx++) {\n      this._collections[idx]._dirty = false;\n    }\n  }\n\n  /**\n   * Starts periodically saves to the underlying storage adapter.\n   */\n  private _autosaveEnable(): void {\n    if (!this._autosave || this._autosaveRunning) {\n      return;\n    }\n    this._autosaveRunning = true;\n\n    const interval = setInterval(() => {\n      if (!this._autosaveRunning) {\n        clearInterval(interval);\n      } else if (this._autosaveDirty()) {\n        this._autosaveHandler = this._autosaveHandler\n          .then(() => {\n            return this.saveDatabase();\n          });\n      }\n    }, this._autosaveInterval);\n  }\n\n  /**\n   * Stops the autosave interval timer.\n   */\n  private _autosaveDisable(): Promise<void> {\n    this._autosaveRunning = false;\n    return this._autosaveHandler;\n  }\n}\n\nexport namespace Loki {\n  export interface Options {\n    env?: Environment;\n    serializationMethod?: SerializationMethod;\n    destructureDelimiter?: string;\n  }\n\n  export interface PersistenceOptions {\n    adapter?: StorageAdapter;\n    autosave?: boolean;\n    autosaveInterval?: number;\n    autoload?: boolean;\n    throttledSaves?: boolean;\n    persistenceMethod?: Loki.PersistenceMethod;\n    inflate?: any;\n  }\n\n  export interface CopyOptions {\n    removeNonSerializable?: boolean;\n  }\n\n  export interface SerializeOptions {\n    serializationMethod?: SerializationMethod;\n  }\n\n  export interface SerializeDestructuredOptions {\n    partitioned?: boolean;\n    partition?: number;\n    delimited?: boolean;\n    delimiter?: string;\n  }\n\n  export interface DeserializeCollectionOptions {\n    partitioned?: boolean;\n    delimited?: boolean;\n    delimiter?: string;\n  }\n\n  export interface ThrottledDrainOptions {\n    recursiveWait?: boolean;\n    recursiveWaitLimit?: boolean;\n    recursiveWaitLimitDuration?: number;\n    started?: Date;\n  }\n\n  export interface Serialized {\n    _env: Environment;\n    _serializationMethod: SerializationMethod;\n    _autosave: boolean;\n    _autosaveInterval: number;\n    _collections: Collection[];\n    databaseVersion: number;\n    engineVersion: number;\n    filename: string;\n    _persistenceAdapter: StorageAdapter;\n    _persistenceMethod: PersistenceMethod;\n    _throttledSaves: boolean;\n  }\n\n  export type LoadDatabaseOptions = Collection.DeserializeOptions & ThrottledDrainOptions;\n\n  export type SerializationMethod = \"normal\" | \"pretty\" | \"destructured\";\n\n  export type PersistenceMethod = \"fs-storage\" | \"local-storage\" | \"indexed-storage\" | \"memory-storage\" | \"adapter\";\n\n  export type Environment = \"NATIVESCRIPT\" | \"NODEJS\" | \"CORDOVA\" | \"BROWSER\" | \"MEMORY\";\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import {Loki} from \"./loki\";\nimport {Collection} from \"./collection\";\n\nLoki[\"Collection\"] = Collection;\n\nexport {Loki, Collection};\nexport default Loki;\n"],"sourceRoot":""}