{"version":3,"sources":["webpack://@lokidb/partitioning-adapter/webpack/universalModuleDefinition","webpack://@lokidb/partitioning-adapter/webpack/bootstrap","webpack://@lokidb/partitioning-adapter/./packages/common/plugin.ts","webpack://@lokidb/partitioning-adapter/external \"@lokidb/loki\"","webpack://@lokidb/partitioning-adapter/./packages/partitioning-adapter/src/partitioning_adapter.ts","webpack://@lokidb/partitioning-adapter/./packages/partitioning-adapter/src/index.ts","webpack://@lokidb/partitioning-adapter/(webpack)/buildin/global.js"],"names":[],"mappings":"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","file":"lokidb.partitioning-adapter.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@lokidb/loki\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@lokidb/partitioning-adapter\", [\"@lokidb/loki\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@lokidb/partitioning-adapter\"] = factory(require(\"@lokidb/loki\"));\n\telse\n\t\troot[\"@lokidb/partitioning-adapter\"] = factory(root[\"@lokidb/loki\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","function getGlobal(): any {\n  let glob;\n  (function (global) {\n    glob = global;\n  })(global !== undefined && global || this);\n  return glob;\n}\n\n\nfunction create(): void {\n  const global = getGlobal();\n  const sym = Symbol.for(\"LOKI\") as any;\n  if (global[sym] === undefined) {\n    global[sym] = {\n    };\n  }\n  return global[sym];\n}\n\n/**\n * @hidden\n */\nexport const PLUGINS = create();\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","import { Loki } from \"../../loki/src/loki\";\nimport { StorageAdapter } from \"../../common/types\";\nimport { PLUGINS } from \"../../common/plugin\";\n\n/**\n * An adapter for adapters. Converts a non reference mode adapter into a reference mode adapter\n * which can perform destructuring and partitioning. Each collection will be stored in its own key/save and\n * only dirty collections will be saved. If you  turn on paging with default page size of 25megs and save\n * a 75 meg collection it should use up roughly 3 save slots (key/value pairs sent to inner adapter).\n * A dirty collection that spans three pages will save all three pages again\n * Paging mode was added mainly because Chrome has issues saving 'too large' of a string within a\n * single IndexedDB row. If a single document update causes the collection to be flagged as dirty, all\n * of that collection's pages will be written on next save.\n */\nexport class PartitioningAdapter implements StorageAdapter {\n\n  public mode: string;\n  private _adapter: StorageAdapter;\n  private _dbref: Loki;\n  private _dbname: string;\n  private _pageIterator: PartitioningAdapter.PageIterator;\n  private _paging: boolean;\n  private _pageSize: number;\n  private _delimiter: string;\n  private _dirtyPartitions: number[];\n\n  /**\n   * Registers the partitioning adapter as plugin.\n   */\n  static register(): void {\n    PLUGINS[\"PartitioningAdapter\"] = PartitioningAdapter;\n  }\n\n  /**\n   * Deregisters the partitioning storage as plugin.\n   */\n  static deregister(): void {\n    delete PLUGINS[\"PartitioningAdapter\"];\n  }\n\n  /**\n   * @param {object} adapter - reference to a 'non-reference' mode loki adapter instance.\n   * @param {boolean} paging - (default: false) set to true to enable paging collection data.\n   * @param {number} pageSize - (default : 25MB) you can use this to limit size of strings passed to inner adapter.\n   * @param {string} delimiter - allows you to override the default delimiter\n   */\n  constructor(adapter: StorageAdapter, {paging = false, pageSize = 25 * 1024 * 1024, delimiter = \"$<\\n\"} = {}) {\n    this.mode = \"reference\";\n    this._adapter = null;\n    this._dbref = null;\n    this._dbname = \"\";\n    this._pageIterator = {};\n\n    // verify user passed an appropriate adapter\n    if (adapter) {\n      if (adapter.mode === \"reference\") {\n        throw new Error(\"LokiPartitioningAdapter cannot be instantiated with a reference mode adapter.\");\n      } else {\n        this._adapter = adapter;\n      }\n    } else {\n      throw new Error(\"LokiPartitioningAdapter requires a (non-reference mode) adapter on construction.\");\n    }\n\n    this._paging = paging;\n    this._pageSize = pageSize;\n    this._delimiter = delimiter;\n  }\n\n  /**\n   * Loads a database which was partitioned into several key/value saves.\n   * (Loki persistence adapter interface function)\n   *\n   * @param {string} dbname - name of the database (filename/keyname)\n   * @returns {Promise} a Promise that resolves after the database was loaded\n   */\n  public loadDatabase(dbname: string): Promise<any> {\n    this._dbname = dbname;\n    this._dbref = new Loki(dbname);\n\n    // load the db container (without data)\n    return this._adapter.loadDatabase(dbname).then((result: string) => {\n      if (typeof result !== \"string\") {\n        throw new Error(\"LokiPartitioningAdapter received an unexpected response from inner adapter loadDatabase()\");\n      }\n\n      // I will want to use loki destructuring helper methods so i will inflate into typed instance\n      let db = JSON.parse(result);\n      this._dbref.loadJSONObject(db);\n      db = null;\n\n      if (this._dbref._collections.length === 0) {\n        return this._dbref;\n      }\n\n      this._pageIterator = {\n        collection: 0,\n        pageIndex: 0\n      };\n\n      return this._loadNextPartition(0).then(() => this._dbref);\n    });\n  }\n\n  /**\n   * Used to sequentially load each collection partition, one at a time.\n   *\n   * @param {int} partition - ordinal collection position to load next\n   * @returns {Promise} a Promise that resolves after the next partition is loaded\n   */\n  private _loadNextPartition(partition: number): Promise<void> {\n    if (this._paging === true) {\n      this._pageIterator.pageIndex = 0;\n      return this._loadNextPage();\n    }\n\n    const keyname = this._dbname + \".\" + partition;\n    return this._adapter.loadDatabase(keyname).then((result: string) => {\n      this._dbref._collections[partition]._data = this._dbref.deserializeCollection(result, {\n        delimited: true\n      });\n\n      if (++partition < this._dbref._collections.length) {\n        return this._loadNextPartition(partition);\n      }\n      return Promise.resolve();\n    });\n  }\n\n  /**\n   * Used to sequentially load the next page of collection partition, one at a time.\n   *\n   * @returns {Promise} a Promise that resolves after the next page is loaded\n   */\n  private _loadNextPage(): Promise<void> {\n    // calculate name for next saved page in sequence\n    const keyname = this._dbname + \".\" + this._pageIterator.collection + \".\" + this._pageIterator.pageIndex;\n\n    // load whatever page is next in sequence\n    return this._adapter.loadDatabase(keyname).then((result: string) => {\n      let data = result.split(this._delimiter);\n      result = \"\"; // free up memory now that we have split it into array\n      let dlen = data.length;\n\n      // detect if last page by presence of final empty string element and remove it if so\n      const isLastPage = (data[dlen - 1] === \"\");\n      if (isLastPage) {\n        data.pop();\n        dlen = data.length;\n        // empty collections are just a delimiter meaning two blank items\n        if (data[dlen - 1] === \"\" && dlen === 1) {\n          data.pop();\n          dlen = data.length;\n        }\n      }\n\n      // convert stringified array elements to object instances and push to collection data\n      for (let idx = 0; idx < dlen; idx++) {\n        this._dbref._collections[this._pageIterator.collection]._data.push(JSON.parse(data[idx]));\n        data[idx] = null;\n      }\n      data = [];\n\n      // if last page, we are done with this partition\n      if (isLastPage) {\n        // if there are more partitions, kick off next partition load\n        if (++this._pageIterator.collection < this._dbref._collections.length) {\n          return this._loadNextPartition(this._pageIterator.collection);\n        }\n      } else {\n        this._pageIterator.pageIndex++;\n        return this._loadNextPage();\n      }\n      return Promise.resolve();\n    });\n  }\n\n  /**\n   * Saves a database by partioning into separate key/value saves.\n   * (Loki 'reference mode' persistence adapter interface function)\n   *\n   * @param {string} dbname - name of the database (filename/keyname)\n   * @param {object} dbref - reference to database which we will partition and save.\n   * @returns {Promise} a Promise that resolves after the database was deleted\n   *\n   */\n  public exportDatabase(dbname: string, dbref: Loki): Promise<void> {\n    this._dbref = dbref;\n    this._dbname = dbname;\n\n    // queue up dirty partitions to be saved\n    this._dirtyPartitions = [-1];\n    for (let idx = 0; idx < dbref._collections.length; idx++) {\n      if (dbref._collections[idx]._dirty) {\n        this._dirtyPartitions.push(idx);\n      }\n    }\n\n    return this._saveNextPartition();\n  }\n\n  /**\n   * Helper method used internally to save each dirty collection, one at a time.\n   *\n   * @returns {Promise} a Promise that resolves after the next partition is saved\n   */\n  private _saveNextPartition(): Promise<void> {\n    const partition = this._dirtyPartitions.shift();\n    const keyname = this._dbname + ((partition === -1) ? \"\" : (\".\" + partition));\n\n    // if we are doing paging and this is collection partition\n    if (this._paging && partition !== -1) {\n      this._pageIterator = {\n        collection: partition,\n        docIndex: 0,\n        pageIndex: 0\n      };\n\n      // since saveNextPage recursively calls itself until done, our callback means this whole paged partition is finished\n      return this._saveNextPage().then(() => {\n        if (this._dirtyPartitions.length !== 0) {\n          return this._saveNextPartition();\n        }\n        return Promise.resolve();\n      });\n    }\n\n    // otherwise this is 'non-paged' partioning...\n    const result = this._dbref.serializeDestructured({\n      partitioned: true,\n      delimited: true,\n      partition\n    });\n\n    return this._adapter.saveDatabase(keyname, result as string).then(() => {\n      if (this._dirtyPartitions.length !== 0) {\n        return this._saveNextPartition();\n      }\n      return Promise.resolve();\n    });\n  }\n\n  /**\n   * Helper method used internally to generate and save the next page of the current (dirty) partition.\n   *\n   * @returns {Promise} a Promise that resolves after the next partition is saved\n   */\n  private _saveNextPage(): Promise<void> {\n    const coll = this._dbref._collections[this._pageIterator.collection];\n    const keyname = this._dbname + \".\" + this._pageIterator.collection + \".\" + this._pageIterator.pageIndex;\n    let pageLen = 0;\n    const cdlen = coll._data.length;\n    const delimlen = this._delimiter.length;\n    let serializedObject = \"\";\n    let pageBuilder = \"\";\n    let doneWithPartition = false;\n    let doneWithPage = false;\n\n    const pageSaveCallback = () => {\n      pageBuilder = \"\";\n\n      // update meta properties then continue process by invoking callback\n      if (!doneWithPartition) {\n        this._pageIterator.pageIndex++;\n        return this._saveNextPage();\n      }\n      return Promise.resolve();\n    };\n\n    if (coll._data.length === 0) {\n      doneWithPartition = true;\n    }\n\n    while (!doneWithPartition && !doneWithPage) {\n      if (!doneWithPartition) {\n        // serialize object\n        serializedObject = JSON.stringify(coll._data[this._pageIterator.docIndex]);\n        pageBuilder += serializedObject;\n        pageLen += serializedObject.length;\n\n        // if no more documents in collection to add, we are done with partition\n        if (++this._pageIterator.docIndex >= cdlen) doneWithPartition = true;\n      }\n      // if our current page is bigger than defined pageSize, we are done with page\n      if (pageLen >= this._pageSize) doneWithPage = true;\n\n      // if not done with current page, need delimiter before next item\n      // if done with partition we also want a delmiter to indicate 'end of pages' final empty row\n      if (!doneWithPage || doneWithPartition) {\n        pageBuilder += this._delimiter;\n        pageLen += delimlen;\n      }\n    }\n    // if we are done with page save it and pass off to next recursive call or callback\n    return this._adapter.saveDatabase(keyname, pageBuilder).then(pageSaveCallback);\n  }\n}\n\nnamespace PartitioningAdapter {\n  export interface PageIterator {\n    collection?: number;\n    docIndex?: number;\n    pageIndex?: number;\n  }\n}\n","import { PartitioningAdapter } from \"./partitioning_adapter\";\n\nexport {PartitioningAdapter};\nexport default PartitioningAdapter;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n"],"sourceRoot":""}