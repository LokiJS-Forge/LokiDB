{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 939162a11d6c09462242","webpack:///./packages/partitioning-adapter/src/partitioning_adapter.js","webpack:///external \"@lokijs/loki\""],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;AC7Da;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA,wBAAwB,gEAAgE,KAAK;AAC7F;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,YAAY,IAAI;AAChB,cAAc,QAAQ;AACtB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;AAEA;;;;;;;ACjRA,+C","file":"lokijs.partitioning-adapter.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@lokijs/loki\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@lokijs/loki\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@lokijs/partitioning-adapter\"] = factory(require(\"@lokijs/loki\"));\n\telse\n\t\troot[\"@lokijs/partitioning-adapter\"] = factory(root[\"@lokijs/loki\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 939162a11d6c09462242","import {Loki} from \"../../loki/src/loki\";\n\n/**\n * An adapter for adapters. Converts a non reference mode adapter into a reference mode adapter\n * which can perform destructuring and partitioning. Each collection will be stored in its own key/save and\n * only dirty collections will be saved. If you  turn on paging with default page size of 25megs and save\n * a 75 meg collection it should use up roughly 3 save slots (key/value pairs sent to inner adapter).\n * A dirty collection that spans three pages will save all three pages again\n * Paging mode was added mainly because Chrome has issues saving 'too large' of a string within a\n * single IndexedDB row. If a single document update causes the collection to be flagged as dirty, all\n * of that collection's pages will be written on next save.\n */\nexport class LokiPartitioningAdapter {\n  /**\n   * @param {object} adapter - reference to a 'non-reference' mode loki adapter instance.\n   * @param {boolean} paging - (default: false) set to true to enable paging collection data.\n   * @param {number} pageSize - (default : 25MB) you can use this to limit size of strings passed to inner adapter.\n   * @param {string} delimiter - allows you to override the default delimiter\n   */\n  constructor(adapter, {paging = false, pageSize = 25 * 1024 * 1024, delimiter = \"$<\\n\"} = {}) {\n    this.mode = \"reference\";\n    this._adapter = null;\n    this._dbref = null;\n    this._dbname = \"\";\n    this._pageIterator = {};\n\n    // verify user passed an appropriate adapter\n    if (adapter) {\n      if (adapter.mode === \"reference\") {\n        throw new Error(\"LokiPartitioningAdapter cannot be instantiated with a reference mode adapter.\");\n      } else {\n        this._adapter = adapter;\n      }\n    } else {\n      throw new Error(\"LokiPartitioningAdapter requires a (non-reference mode) adapter on construction.\");\n    }\n\n    this._paging = paging;\n    this._pageSize = pageSize;\n    this._delimiter = delimiter;\n  }\n\n  /**\n\t * Loads a database which was partitioned into several key/value saves.\n\t * (Loki persistence adapter interface function)\n\t *\n\t * @param {string} dbname - name of the database (filename/keyname)\n\t * @returns {Promise} a Promise that resolves after the database was loaded\n\t */\n  loadDatabase(dbname) {\n    this._dbname = dbname;\n    this._dbref = new Loki(dbname);\n\n    // load the db container (without data)\n    return this._adapter.loadDatabase(dbname).then((result) => {\n      if (typeof result !== \"string\") {\n        throw new Error(\"LokiPartitioningAdapter received an unexpected response from inner adapter loadDatabase()\");\n      }\n\n      // I will want to use loki destructuring helper methods so i will inflate into typed instance\n      let db = JSON.parse(result);\n      this._dbref.loadJSONObject(db);\n      db = null;\n\n      if (this._dbref.collections.length === 0) {\n        return this._dbref;\n      }\n\n      this._pageIterator = {\n        collection: 0,\n        pageIndex: 0\n      };\n\n      return this.loadNextPartition(0).then(() => this._dbref);\n    });\n  }\n\n  /**\n\t * Used to sequentially load each collection partition, one at a time.\n\t *\n\t * @param {int} partition - ordinal collection position to load next\n\t * @returns {Promise} a Promise that resolves after the next partition is loaded\n\t */\n  loadNextPartition(partition) {\n    const keyname = this._dbname + \".\" + partition;\n\n    if (this._paging === true) {\n      this._pageIterator.pageIndex = 0;\n      return this.loadNextPage();\n    }\n\n    return this._adapter.loadDatabase(keyname).then((result) => {\n      const data = this._dbref.deserializeCollection(result, {\n        delimited: true,\n        collectionIndex: partition\n      });\n      this._dbref.collections[partition].data = data;\n\n      if (++partition < this._dbref.collections.length) {\n        return this.loadNextPartition(partition);\n      }\n    });\n  }\n\n  /**\n\t * Used to sequentially load the next page of collection partition, one at a time.\n\t *\n\t * @returns {Promise} a Promise that resolves after the next page is loaded\n\t */\n  loadNextPage() {\n    // calculate name for next saved page in sequence\n    const keyname = this._dbname + \".\" + this._pageIterator.collection + \".\" + this._pageIterator.pageIndex;\n\n    // load whatever page is next in sequence\n    return this._adapter.loadDatabase(keyname).then((result) => {\n      let data = result.split(this._delimiter);\n      result = \"\"; // free up memory now that we have split it into array\n      let dlen = data.length;\n      let idx;\n\n      // detect if last page by presence of final empty string element and remove it if so\n      const isLastPage = (data[dlen - 1] === \"\");\n      if (isLastPage) {\n        data.pop();\n        dlen = data.length;\n        // empty collections are just a delimiter meaning two blank items\n        if (data[dlen - 1] === \"\" && dlen === 1) {\n          data.pop();\n          dlen = data.length;\n        }\n      }\n\n      // convert stringified array elements to object instances and push to collection data\n      for (idx = 0; idx < dlen; idx++) {\n        this._dbref.collections[this._pageIterator.collection].data.push(JSON.parse(data[idx]));\n        data[idx] = null;\n      }\n      data = [];\n\n      // if last page, we are done with this partition\n      if (isLastPage) {\n        // if there are more partitions, kick off next partition load\n        if (++this._pageIterator.collection < this._dbref.collections.length) {\n          return this.loadNextPartition(this._pageIterator.collection);\n        }\n      } else {\n        this._pageIterator.pageIndex++;\n        return this.loadNextPage();\n      }\n    });\n  }\n\n  /**\n\t * Saves a database by partioning into separate key/value saves.\n\t * (Loki 'reference mode' persistence adapter interface function)\n\t *\n\t * @param {string} dbname - name of the database (filename/keyname)\n\t * @param {object} dbref - reference to database which we will partition and save.\n\t * @returns {Promise} a Promise that resolves after the database was deleted\n\t *\n\t */\n  exportDatabase(dbname, dbref) {\n    let idx;\n    const clen = dbref.collections.length;\n\n    this._dbref = dbref;\n    this._dbname = dbname;\n\n    // queue up dirty partitions to be saved\n    this.dirtyPartitions = [-1];\n    for (idx = 0; idx < clen; idx++) {\n      if (dbref.collections[idx].dirty) {\n        this.dirtyPartitions.push(idx);\n      }\n    }\n\n    return this.saveNextPartition();\n  }\n\n  /**\n\t * Helper method used internally to save each dirty collection, one at a time.\n\t *\n\t * @returns {Promise} a Promise that resolves after the next partition is saved\n\t */\n  saveNextPartition() {\n    const partition = this.dirtyPartitions.shift();\n    const keyname = this._dbname + ((partition === -1) ? \"\" : (\".\" + partition));\n\n    // if we are doing paging and this is collection partition\n    if (this._paging && partition !== -1) {\n      this._pageIterator = {\n        collection: partition,\n        docIndex: 0,\n        pageIndex: 0\n      };\n\n      // since saveNextPage recursively calls itself until done, our callback means this whole paged partition is finished\n      return this.saveNextPage().then(() => {\n        if (this.dirtyPartitions.length !== 0) {\n          return this.saveNextPartition();\n        }\n      });\n    }\n\n    // otherwise this is 'non-paged' partioning...\n    const result = this._dbref.serializeDestructured({\n      partitioned: true,\n      delimited: true,\n      partition\n    });\n\n    return this._adapter.saveDatabase(keyname, result).then(() => {\n      if (this.dirtyPartitions.length !== 0) {\n        return this.saveNextPartition();\n      }\n    });\n  }\n\n  /**\n\t * Helper method used internally to generate and save the next page of the current (dirty) partition.\n\t *\n\t * @returns {Promise} a Promise that resolves after the next partition is saved\n\t */\n  saveNextPage() {\n    const coll = this._dbref.collections[this._pageIterator.collection];\n    const keyname = this._dbname + \".\" + this._pageIterator.collection + \".\" + this._pageIterator.pageIndex;\n    let pageLen = 0;\n    const cdlen = coll.data.length;\n    const delimlen = this._delimiter.length;\n    let serializedObject = \"\";\n    let pageBuilder = \"\";\n    let doneWithPartition = false;\n    let doneWithPage = false;\n\n    const pageSaveCallback = () => {\n      pageBuilder = \"\";\n\n      // update meta properties then continue process by invoking callback\n      if (!doneWithPartition) {\n        this._pageIterator.pageIndex++;\n        return this.saveNextPage();\n      }\n    };\n\n    if (coll.data.length === 0) {\n      doneWithPartition = true;\n    }\n\n    while (!doneWithPartition && !doneWithPage) {\n      if (!doneWithPartition) {\n        // serialize object\n        serializedObject = JSON.stringify(coll.data[this._pageIterator.docIndex]);\n        pageBuilder += serializedObject;\n        pageLen += serializedObject.length;\n\n        // if no more documents in collection to add, we are done with partition\n        if (++this._pageIterator.docIndex >= cdlen) doneWithPartition = true;\n      }\n      // if our current page is bigger than defined pageSize, we are done with page\n      if (pageLen >= this._pageSize) doneWithPage = true;\n\n      // if not done with current page, need delimiter before next item\n      // if done with partition we also want a delmiter to indicate 'end of pages' final empty row\n      if (!doneWithPage || doneWithPartition) {\n        pageBuilder += this._delimiter;\n        pageLen += delimlen;\n      }\n    }\n    // if we are done with page save it and pass off to next recursive call or callback\n    return this._adapter.saveDatabase(keyname, pageBuilder).then(pageSaveCallback);\n  }\n}\n\nexport default LokiPartitioningAdapter;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./packages/partitioning-adapter/src/partitioning_adapter.js\n// module id = 0\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@lokijs/loki\"\n// module id = 1\n// module chunks = 0"],"sourceRoot":""}